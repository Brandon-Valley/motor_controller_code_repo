
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002780  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002944  08002944  00012944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002964  08002964  00012964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800296c  0800296c  0001296c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002974  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  2000000c  08002980  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000108  08002980  00020108  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f7e7  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001d28  00000000  00000000  0002f823  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009c0  00000000  00000000  00031550  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008f8  00000000  00000000  00031f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004d58  00000000  00000000  00032808  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003439  00000000  00000000  00037560  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a999  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002884  00000000  00000000  0003aa18  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000014d  00000000  00000000  0003d29c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800292c 	.word	0x0800292c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800292c 	.word	0x0800292c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295
 8000224:	f04f 30ff 	movne.w	r0, #4294967295
 8000228:	f000 b97a 	b.w	8000520 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	468c      	mov	ip, r1
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	9e08      	ldr	r6, [sp, #32]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d151      	bne.n	80002f8 <__udivmoddi4+0xb4>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d96d      	bls.n	8000336 <__udivmoddi4+0xf2>
 800025a:	fab2 fe82 	clz	lr, r2
 800025e:	f1be 0f00 	cmp.w	lr, #0
 8000262:	d00b      	beq.n	800027c <__udivmoddi4+0x38>
 8000264:	f1ce 0c20 	rsb	ip, lr, #32
 8000268:	fa01 f50e 	lsl.w	r5, r1, lr
 800026c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000270:	fa02 f70e 	lsl.w	r7, r2, lr
 8000274:	ea4c 0c05 	orr.w	ip, ip, r5
 8000278:	fa00 f40e 	lsl.w	r4, r0, lr
 800027c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000280:	0c25      	lsrs	r5, r4, #16
 8000282:	fbbc f8fa 	udiv	r8, ip, sl
 8000286:	fa1f f987 	uxth.w	r9, r7
 800028a:	fb0a cc18 	mls	ip, sl, r8, ip
 800028e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000292:	fb08 f309 	mul.w	r3, r8, r9
 8000296:	42ab      	cmp	r3, r5
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x6c>
 800029a:	19ed      	adds	r5, r5, r7
 800029c:	f108 32ff 	add.w	r2, r8, #4294967295
 80002a0:	f080 8123 	bcs.w	80004ea <__udivmoddi4+0x2a6>
 80002a4:	42ab      	cmp	r3, r5
 80002a6:	f240 8120 	bls.w	80004ea <__udivmoddi4+0x2a6>
 80002aa:	f1a8 0802 	sub.w	r8, r8, #2
 80002ae:	443d      	add	r5, r7
 80002b0:	1aed      	subs	r5, r5, r3
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002c0:	fb00 f909 	mul.w	r9, r0, r9
 80002c4:	45a1      	cmp	r9, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x98>
 80002c8:	19e4      	adds	r4, r4, r7
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 810a 	bcs.w	80004e6 <__udivmoddi4+0x2a2>
 80002d2:	45a1      	cmp	r9, r4
 80002d4:	f240 8107 	bls.w	80004e6 <__udivmoddi4+0x2a2>
 80002d8:	3802      	subs	r0, #2
 80002da:	443c      	add	r4, r7
 80002dc:	eba4 0409 	sub.w	r4, r4, r9
 80002e0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e4:	2100      	movs	r1, #0
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d061      	beq.n	80003ae <__udivmoddi4+0x16a>
 80002ea:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ee:	2300      	movs	r3, #0
 80002f0:	6034      	str	r4, [r6, #0]
 80002f2:	6073      	str	r3, [r6, #4]
 80002f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f8:	428b      	cmp	r3, r1
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0xc8>
 80002fc:	2e00      	cmp	r6, #0
 80002fe:	d054      	beq.n	80003aa <__udivmoddi4+0x166>
 8000300:	2100      	movs	r1, #0
 8000302:	e886 0021 	stmia.w	r6, {r0, r5}
 8000306:	4608      	mov	r0, r1
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	fab3 f183 	clz	r1, r3
 8000310:	2900      	cmp	r1, #0
 8000312:	f040 808e 	bne.w	8000432 <__udivmoddi4+0x1ee>
 8000316:	42ab      	cmp	r3, r5
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xdc>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2d0>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb65 0503 	sbc.w	r5, r5, r3
 8000326:	2001      	movs	r0, #1
 8000328:	46ac      	mov	ip, r5
 800032a:	2e00      	cmp	r6, #0
 800032c:	d03f      	beq.n	80003ae <__udivmoddi4+0x16a>
 800032e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	b912      	cbnz	r2, 800033e <__udivmoddi4+0xfa>
 8000338:	2701      	movs	r7, #1
 800033a:	fbb7 f7f2 	udiv	r7, r7, r2
 800033e:	fab7 fe87 	clz	lr, r7
 8000342:	f1be 0f00 	cmp.w	lr, #0
 8000346:	d134      	bne.n	80003b2 <__udivmoddi4+0x16e>
 8000348:	1beb      	subs	r3, r5, r7
 800034a:	0c3a      	lsrs	r2, r7, #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb3 f8f2 	udiv	r8, r3, r2
 8000356:	0c25      	lsrs	r5, r4, #16
 8000358:	fb02 3318 	mls	r3, r2, r8, r3
 800035c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000360:	fb0c f308 	mul.w	r3, ip, r8
 8000364:	42ab      	cmp	r3, r5
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x134>
 8000368:	19ed      	adds	r5, r5, r7
 800036a:	f108 30ff 	add.w	r0, r8, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x132>
 8000370:	42ab      	cmp	r3, r5
 8000372:	f200 80d1 	bhi.w	8000518 <__udivmoddi4+0x2d4>
 8000376:	4680      	mov	r8, r0
 8000378:	1aed      	subs	r5, r5, r3
 800037a:	b2a3      	uxth	r3, r4
 800037c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000380:	fb02 5510 	mls	r5, r2, r0, r5
 8000384:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000388:	fb0c fc00 	mul.w	ip, ip, r0
 800038c:	45a4      	cmp	ip, r4
 800038e:	d907      	bls.n	80003a0 <__udivmoddi4+0x15c>
 8000390:	19e4      	adds	r4, r4, r7
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	d202      	bcs.n	800039e <__udivmoddi4+0x15a>
 8000398:	45a4      	cmp	ip, r4
 800039a:	f200 80b8 	bhi.w	800050e <__udivmoddi4+0x2ca>
 800039e:	4618      	mov	r0, r3
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a8:	e79d      	b.n	80002e6 <__udivmoddi4+0xa2>
 80003aa:	4631      	mov	r1, r6
 80003ac:	4630      	mov	r0, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	f1ce 0420 	rsb	r4, lr, #32
 80003b6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003ba:	fa07 f70e 	lsl.w	r7, r7, lr
 80003be:	fa20 f804 	lsr.w	r8, r0, r4
 80003c2:	0c3a      	lsrs	r2, r7, #16
 80003c4:	fa25 f404 	lsr.w	r4, r5, r4
 80003c8:	ea48 0803 	orr.w	r8, r8, r3
 80003cc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003d0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d4:	fb02 4411 	mls	r4, r2, r1, r4
 80003d8:	fa1f fc87 	uxth.w	ip, r7
 80003dc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003e0:	fb01 f30c 	mul.w	r3, r1, ip
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003ea:	d909      	bls.n	8000400 <__udivmoddi4+0x1bc>
 80003ec:	19ed      	adds	r5, r5, r7
 80003ee:	f101 30ff 	add.w	r0, r1, #4294967295
 80003f2:	f080 808a 	bcs.w	800050a <__udivmoddi4+0x2c6>
 80003f6:	42ab      	cmp	r3, r5
 80003f8:	f240 8087 	bls.w	800050a <__udivmoddi4+0x2c6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	443d      	add	r5, r7
 8000400:	1aeb      	subs	r3, r5, r3
 8000402:	fa1f f588 	uxth.w	r5, r8
 8000406:	fbb3 f0f2 	udiv	r0, r3, r2
 800040a:	fb02 3310 	mls	r3, r2, r0, r3
 800040e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000412:	fb00 f30c 	mul.w	r3, r0, ip
 8000416:	42ab      	cmp	r3, r5
 8000418:	d907      	bls.n	800042a <__udivmoddi4+0x1e6>
 800041a:	19ed      	adds	r5, r5, r7
 800041c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000420:	d26f      	bcs.n	8000502 <__udivmoddi4+0x2be>
 8000422:	42ab      	cmp	r3, r5
 8000424:	d96d      	bls.n	8000502 <__udivmoddi4+0x2be>
 8000426:	3802      	subs	r0, #2
 8000428:	443d      	add	r5, r7
 800042a:	1aeb      	subs	r3, r5, r3
 800042c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000430:	e78f      	b.n	8000352 <__udivmoddi4+0x10e>
 8000432:	f1c1 0720 	rsb	r7, r1, #32
 8000436:	fa22 f807 	lsr.w	r8, r2, r7
 800043a:	408b      	lsls	r3, r1
 800043c:	fa05 f401 	lsl.w	r4, r5, r1
 8000440:	ea48 0303 	orr.w	r3, r8, r3
 8000444:	fa20 fe07 	lsr.w	lr, r0, r7
 8000448:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800044c:	40fd      	lsrs	r5, r7
 800044e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000452:	fbb5 f9fc 	udiv	r9, r5, ip
 8000456:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800045a:	fb0c 5519 	mls	r5, ip, r9, r5
 800045e:	fa1f f883 	uxth.w	r8, r3
 8000462:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000466:	fb09 f408 	mul.w	r4, r9, r8
 800046a:	42ac      	cmp	r4, r5
 800046c:	fa02 f201 	lsl.w	r2, r2, r1
 8000470:	fa00 fa01 	lsl.w	sl, r0, r1
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x244>
 8000476:	18ed      	adds	r5, r5, r3
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d243      	bcs.n	8000506 <__udivmoddi4+0x2c2>
 800047e:	42ac      	cmp	r4, r5
 8000480:	d941      	bls.n	8000506 <__udivmoddi4+0x2c2>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	441d      	add	r5, r3
 8000488:	1b2d      	subs	r5, r5, r4
 800048a:	fa1f fe8e 	uxth.w	lr, lr
 800048e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000492:	fb0c 5510 	mls	r5, ip, r0, r5
 8000496:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45a0      	cmp	r8, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x26e>
 80004a2:	18e4      	adds	r4, r4, r3
 80004a4:	f100 35ff 	add.w	r5, r0, #4294967295
 80004a8:	d229      	bcs.n	80004fe <__udivmoddi4+0x2ba>
 80004aa:	45a0      	cmp	r8, r4
 80004ac:	d927      	bls.n	80004fe <__udivmoddi4+0x2ba>
 80004ae:	3802      	subs	r0, #2
 80004b0:	441c      	add	r4, r3
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba4 0408 	sub.w	r4, r4, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454c      	cmp	r4, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	464d      	mov	r5, r9
 80004c4:	d315      	bcc.n	80004f2 <__udivmoddi4+0x2ae>
 80004c6:	d012      	beq.n	80004ee <__udivmoddi4+0x2aa>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x29c>
 80004ca:	ebba 030e 	subs.w	r3, sl, lr
 80004ce:	eb64 0405 	sbc.w	r4, r4, r5
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431f      	orrs	r7, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	6037      	str	r7, [r6, #0]
 80004de:	6074      	str	r4, [r6, #4]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6f8      	b.n	80002dc <__udivmoddi4+0x98>
 80004ea:	4690      	mov	r8, r2
 80004ec:	e6e0      	b.n	80002b0 <__udivmoddi4+0x6c>
 80004ee:	45c2      	cmp	sl, r8
 80004f0:	d2ea      	bcs.n	80004c8 <__udivmoddi4+0x284>
 80004f2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f6:	eb69 0503 	sbc.w	r5, r9, r3
 80004fa:	3801      	subs	r0, #1
 80004fc:	e7e4      	b.n	80004c8 <__udivmoddi4+0x284>
 80004fe:	4628      	mov	r0, r5
 8000500:	e7d7      	b.n	80004b2 <__udivmoddi4+0x26e>
 8000502:	4640      	mov	r0, r8
 8000504:	e791      	b.n	800042a <__udivmoddi4+0x1e6>
 8000506:	4681      	mov	r9, r0
 8000508:	e7be      	b.n	8000488 <__udivmoddi4+0x244>
 800050a:	4601      	mov	r1, r0
 800050c:	e778      	b.n	8000400 <__udivmoddi4+0x1bc>
 800050e:	3802      	subs	r0, #2
 8000510:	443c      	add	r4, r7
 8000512:	e745      	b.n	80003a0 <__udivmoddi4+0x15c>
 8000514:	4608      	mov	r0, r1
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xe6>
 8000518:	f1a8 0802 	sub.w	r8, r8, #2
 800051c:	443d      	add	r5, r7
 800051e:	e72b      	b.n	8000378 <__udivmoddi4+0x134>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000528:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_Init+0x40>)
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <HAL_Init+0x40>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000532:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000534:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <HAL_Init+0x40>)
 8000536:	4b0b      	ldr	r3, [pc, #44]	; (8000564 <HAL_Init+0x40>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800053e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000540:	4a08      	ldr	r2, [pc, #32]	; (8000564 <HAL_Init+0x40>)
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <HAL_Init+0x40>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800054c:	2003      	movs	r0, #3
 800054e:	f000 fb71 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000552:	2000      	movs	r0, #0
 8000554:	f000 f808 	bl	8000568 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000558:	f002 f854 	bl	8002604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800055c:	2300      	movs	r3, #0
}
 800055e:	4618      	mov	r0, r3
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40023c00 	.word	0x40023c00

08000568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b12      	ldr	r3, [pc, #72]	; (80005bc <HAL_InitTick+0x54>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <HAL_InitTick+0x58>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	4619      	mov	r1, r3
 800057a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800057e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000582:	fbb2 f3f3 	udiv	r3, r2, r3
 8000586:	4618      	mov	r0, r3
 8000588:	f000 fb7b 	bl	8000c82 <HAL_SYSTICK_Config>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d001      	beq.n	8000596 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000592:	2301      	movs	r3, #1
 8000594:	e00e      	b.n	80005b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2b0f      	cmp	r3, #15
 800059a:	d80a      	bhi.n	80005b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800059c:	2200      	movs	r2, #0
 800059e:	6879      	ldr	r1, [r7, #4]
 80005a0:	f04f 30ff 	mov.w	r0, #4294967295
 80005a4:	f000 fb51 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_InitTick+0x5c>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	e000      	b.n	80005b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005b2:	2301      	movs	r3, #1
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000008 	.word	0x20000008
 80005c0:	20000004 	.word	0x20000004
 80005c4:	20000000 	.word	0x20000000

080005c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_IncTick+0x20>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	461a      	mov	r2, r3
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <HAL_IncTick+0x24>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4413      	add	r3, r2
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <HAL_IncTick+0x24>)
 80005da:	6013      	str	r3, [r2, #0]
}
 80005dc:	bf00      	nop
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000004 	.word	0x20000004
 80005ec:	20000028 	.word	0x20000028

080005f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_GetTick+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20000028 	.word	0x20000028

08000608 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000610:	2300      	movs	r3, #0
 8000612:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
 800061c:	e033      	b.n	8000686 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000622:	2b00      	cmp	r3, #0
 8000624:	d109      	bne.n	800063a <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2200      	movs	r2, #0
 8000630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f002 f80d 	bl	8002654 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	2b00      	cmp	r3, #0
 8000644:	d118      	bne.n	8000678 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800064e:	f023 0302 	bic.w	r3, r3, #2
 8000652:	f043 0202 	orr.w	r2, r3, #2
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f940 	bl	80008e0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066a:	f023 0303 	bic.w	r3, r3, #3
 800066e:	f043 0201 	orr.w	r2, r3, #1
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	641a      	str	r2, [r3, #64]	; 0x40
 8000676:	e001      	b.n	800067c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000678:	2301      	movs	r3, #1
 800067a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2200      	movs	r2, #0
 8000680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000684:	7bfb      	ldrb	r3, [r7, #15]
}
 8000686:	4618      	mov	r0, r3
 8000688:	3710      	adds	r7, #16
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
	...

08000690 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000690:	b490      	push	{r4, r7}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800069a:	2300      	movs	r3, #0
 800069c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d101      	bne.n	80006ac <HAL_ADC_ConfigChannel+0x1c>
 80006a8:	2302      	movs	r3, #2
 80006aa:	e109      	b.n	80008c0 <HAL_ADC_ConfigChannel+0x230>
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2201      	movs	r2, #1
 80006b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b09      	cmp	r3, #9
 80006ba:	d926      	bls.n	800070a <HAL_ADC_ConfigChannel+0x7a>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	68d9      	ldr	r1, [r3, #12]
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	b29b      	uxth	r3, r3
 80006cc:	4618      	mov	r0, r3
 80006ce:	4603      	mov	r3, r0
 80006d0:	005b      	lsls	r3, r3, #1
 80006d2:	4403      	add	r3, r0
 80006d4:	3b1e      	subs	r3, #30
 80006d6:	2007      	movs	r0, #7
 80006d8:	fa00 f303 	lsl.w	r3, r0, r3
 80006dc:	43db      	mvns	r3, r3
 80006de:	400b      	ands	r3, r1
 80006e0:	60d3      	str	r3, [r2, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68d9      	ldr	r1, [r3, #12]
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	6898      	ldr	r0, [r3, #8]
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	461c      	mov	r4, r3
 80006f8:	4623      	mov	r3, r4
 80006fa:	005b      	lsls	r3, r3, #1
 80006fc:	4423      	add	r3, r4
 80006fe:	3b1e      	subs	r3, #30
 8000700:	fa00 f303 	lsl.w	r3, r0, r3
 8000704:	430b      	orrs	r3, r1
 8000706:	60d3      	str	r3, [r2, #12]
 8000708:	e023      	b.n	8000752 <HAL_ADC_ConfigChannel+0xc2>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6919      	ldr	r1, [r3, #16]
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	b29b      	uxth	r3, r3
 800071a:	4618      	mov	r0, r3
 800071c:	4603      	mov	r3, r0
 800071e:	005b      	lsls	r3, r3, #1
 8000720:	4403      	add	r3, r0
 8000722:	2007      	movs	r0, #7
 8000724:	fa00 f303 	lsl.w	r3, r0, r3
 8000728:	43db      	mvns	r3, r3
 800072a:	400b      	ands	r3, r1
 800072c:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	6919      	ldr	r1, [r3, #16]
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	6898      	ldr	r0, [r3, #8]
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	b29b      	uxth	r3, r3
 8000742:	461c      	mov	r4, r3
 8000744:	4623      	mov	r3, r4
 8000746:	005b      	lsls	r3, r3, #1
 8000748:	4423      	add	r3, r4
 800074a:	fa00 f303 	lsl.w	r3, r0, r3
 800074e:	430b      	orrs	r3, r1
 8000750:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b06      	cmp	r3, #6
 8000758:	d824      	bhi.n	80007a4 <HAL_ADC_ConfigChannel+0x114>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	685a      	ldr	r2, [r3, #4]
 8000768:	4613      	mov	r3, r2
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	4413      	add	r3, r2
 800076e:	3b05      	subs	r3, #5
 8000770:	221f      	movs	r2, #31
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	43db      	mvns	r3, r3
 8000778:	4003      	ands	r3, r0
 800077a:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6819      	ldr	r1, [r3, #0]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	b29b      	uxth	r3, r3
 800078c:	461c      	mov	r4, r3
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685a      	ldr	r2, [r3, #4]
 8000792:	4613      	mov	r3, r2
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	4413      	add	r3, r2
 8000798:	3b05      	subs	r3, #5
 800079a:	fa04 f303 	lsl.w	r3, r4, r3
 800079e:	4303      	orrs	r3, r0
 80007a0:	634b      	str	r3, [r1, #52]	; 0x34
 80007a2:	e04c      	b.n	800083e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	2b0c      	cmp	r3, #12
 80007aa:	d824      	bhi.n	80007f6 <HAL_ADC_ConfigChannel+0x166>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	685a      	ldr	r2, [r3, #4]
 80007ba:	4613      	mov	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4413      	add	r3, r2
 80007c0:	3b23      	subs	r3, #35	; 0x23
 80007c2:	221f      	movs	r2, #31
 80007c4:	fa02 f303 	lsl.w	r3, r2, r3
 80007c8:	43db      	mvns	r3, r3
 80007ca:	4003      	ands	r3, r0
 80007cc:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	461c      	mov	r4, r3
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	3b23      	subs	r3, #35	; 0x23
 80007ec:	fa04 f303 	lsl.w	r3, r4, r3
 80007f0:	4303      	orrs	r3, r0
 80007f2:	630b      	str	r3, [r1, #48]	; 0x30
 80007f4:	e023      	b.n	800083e <HAL_ADC_ConfigChannel+0x1ae>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6819      	ldr	r1, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	685a      	ldr	r2, [r3, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	3b41      	subs	r3, #65	; 0x41
 800080c:	221f      	movs	r2, #31
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43db      	mvns	r3, r3
 8000814:	4003      	ands	r3, r0
 8000816:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	6819      	ldr	r1, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	b29b      	uxth	r3, r3
 8000828:	461c      	mov	r4, r3
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685a      	ldr	r2, [r3, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	3b41      	subs	r3, #65	; 0x41
 8000836:	fa04 f303 	lsl.w	r3, r4, r3
 800083a:	4303      	orrs	r3, r0
 800083c:	62cb      	str	r3, [r1, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800083e:	4b23      	ldr	r3, [pc, #140]	; (80008cc <HAL_ADC_ConfigChannel+0x23c>)
 8000840:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <HAL_ADC_ConfigChannel+0x240>)
 8000848:	4293      	cmp	r3, r2
 800084a:	d109      	bne.n	8000860 <HAL_ADC_ConfigChannel+0x1d0>
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2b12      	cmp	r3, #18
 8000852:	d105      	bne.n	8000860 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a1a      	ldr	r2, [pc, #104]	; (80008d0 <HAL_ADC_ConfigChannel+0x240>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d125      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x226>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a19      	ldr	r2, [pc, #100]	; (80008d4 <HAL_ADC_ConfigChannel+0x244>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d003      	beq.n	800087c <HAL_ADC_ConfigChannel+0x1ec>
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2b11      	cmp	r3, #17
 800087a:	d11c      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x226>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a11      	ldr	r2, [pc, #68]	; (80008d4 <HAL_ADC_ConfigChannel+0x244>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d111      	bne.n	80008b6 <HAL_ADC_ConfigChannel+0x226>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <HAL_ADC_ConfigChannel+0x248>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a11      	ldr	r2, [pc, #68]	; (80008dc <HAL_ADC_ConfigChannel+0x24c>)
 8000898:	fba2 2303 	umull	r2, r3, r2, r3
 800089c:	0c9a      	lsrs	r2, r3, #18
 800089e:	4613      	mov	r3, r2
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	4413      	add	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008a8:	e002      	b.n	80008b0 <HAL_ADC_ConfigChannel+0x220>
      {
        counter--;
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	3b01      	subs	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d1f9      	bne.n	80008aa <HAL_ADC_ConfigChannel+0x21a>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80008be:	2300      	movs	r3, #0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bc90      	pop	{r4, r7}
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	40012300 	.word	0x40012300
 80008d0:	40012000 	.word	0x40012000
 80008d4:	10000012 	.word	0x10000012
 80008d8:	20000008 	.word	0x20000008
 80008dc:	431bde83 	.word	0x431bde83

080008e0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b085      	sub	sp, #20
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008e8:	4b78      	ldr	r3, [pc, #480]	; (8000acc <ADC_Init+0x1ec>)
 80008ea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	431a      	orrs	r2, r3
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	6812      	ldr	r2, [r2, #0]
 800090e:	6852      	ldr	r2, [r2, #4]
 8000910:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	6851      	ldr	r1, [r2, #4]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	6912      	ldr	r2, [r2, #16]
 8000924:	0212      	lsls	r2, r2, #8
 8000926:	430a      	orrs	r2, r1
 8000928:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	6812      	ldr	r2, [r2, #0]
 8000932:	6852      	ldr	r2, [r2, #4]
 8000934:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000938:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	6812      	ldr	r2, [r2, #0]
 8000942:	6851      	ldr	r1, [r2, #4]
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	6892      	ldr	r2, [r2, #8]
 8000948:	430a      	orrs	r2, r1
 800094a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	6812      	ldr	r2, [r2, #0]
 8000954:	6892      	ldr	r2, [r2, #8]
 8000956:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800095a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	6812      	ldr	r2, [r2, #0]
 8000964:	6891      	ldr	r1, [r2, #8]
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	68d2      	ldr	r2, [r2, #12]
 800096a:	430a      	orrs	r2, r1
 800096c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000972:	4a57      	ldr	r2, [pc, #348]	; (8000ad0 <ADC_Init+0x1f0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d022      	beq.n	80009be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	687a      	ldr	r2, [r7, #4]
 800097e:	6812      	ldr	r2, [r2, #0]
 8000980:	6892      	ldr	r2, [r2, #8]
 8000982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	6812      	ldr	r2, [r2, #0]
 8000990:	6891      	ldr	r1, [r2, #8]
 8000992:	687a      	ldr	r2, [r7, #4]
 8000994:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000996:	430a      	orrs	r2, r1
 8000998:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	6812      	ldr	r2, [r2, #0]
 80009a2:	6892      	ldr	r2, [r2, #8]
 80009a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	687a      	ldr	r2, [r7, #4]
 80009b0:	6812      	ldr	r2, [r2, #0]
 80009b2:	6891      	ldr	r1, [r2, #8]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80009b8:	430a      	orrs	r2, r1
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	e00f      	b.n	80009de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	6812      	ldr	r2, [r2, #0]
 80009c6:	6892      	ldr	r2, [r2, #8]
 80009c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	6812      	ldr	r2, [r2, #0]
 80009d6:	6892      	ldr	r2, [r2, #8]
 80009d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	6892      	ldr	r2, [r2, #8]
 80009e8:	f022 0202 	bic.w	r2, r2, #2
 80009ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	6812      	ldr	r2, [r2, #0]
 80009f6:	6891      	ldr	r1, [r2, #8]
 80009f8:	687a      	ldr	r2, [r7, #4]
 80009fa:	6992      	ldr	r2, [r2, #24]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6a1b      	ldr	r3, [r3, #32]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d01b      	beq.n	8000a42 <ADC_Init+0x162>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	6812      	ldr	r2, [r2, #0]
 8000a12:	6852      	ldr	r2, [r2, #4]
 8000a14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000a18:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	6812      	ldr	r2, [r2, #0]
 8000a22:	6852      	ldr	r2, [r2, #4]
 8000a24:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a28:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	687a      	ldr	r2, [r7, #4]
 8000a30:	6812      	ldr	r2, [r2, #0]
 8000a32:	6851      	ldr	r1, [r2, #4]
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000a38:	3a01      	subs	r2, #1
 8000a3a:	0352      	lsls	r2, r2, #13
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	e007      	b.n	8000a52 <ADC_Init+0x172>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	6812      	ldr	r2, [r2, #0]
 8000a4a:	6852      	ldr	r2, [r2, #4]
 8000a4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a50:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	687a      	ldr	r2, [r7, #4]
 8000a58:	6812      	ldr	r2, [r2, #0]
 8000a5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000a5c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	69d2      	ldr	r2, [r2, #28]
 8000a70:	3a01      	subs	r2, #1
 8000a72:	0512      	lsls	r2, r2, #20
 8000a74:	430a      	orrs	r2, r1
 8000a76:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	6812      	ldr	r2, [r2, #0]
 8000a80:	6892      	ldr	r2, [r2, #8]
 8000a82:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	6812      	ldr	r2, [r2, #0]
 8000a90:	6891      	ldr	r1, [r2, #8]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000a96:	0252      	lsls	r2, r2, #9
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	6812      	ldr	r2, [r2, #0]
 8000aa4:	6892      	ldr	r2, [r2, #8]
 8000aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	6812      	ldr	r2, [r2, #0]
 8000ab4:	6891      	ldr	r1, [r2, #8]
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	6952      	ldr	r2, [r2, #20]
 8000aba:	0292      	lsls	r2, r2, #10
 8000abc:	430a      	orrs	r2, r1
 8000abe:	609a      	str	r2, [r3, #8]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40012300 	.word	0x40012300
 8000ad0:	0f000001 	.word	0x0f000001

08000ad4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <NVIC_SetPriorityGrouping+0x44>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aea:	68ba      	ldr	r2, [r7, #8]
 8000aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000af0:	4013      	ands	r3, r2
 8000af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b06:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <NVIC_SetPriorityGrouping+0x44>)
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	60d3      	str	r3, [r2, #12]
}
 8000b0c:	bf00      	nop
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000ed00 	.word	0xe000ed00

08000b1c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b20:	4b04      	ldr	r3, [pc, #16]	; (8000b34 <NVIC_GetPriorityGrouping+0x18>)
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	0a1b      	lsrs	r3, r3, #8
 8000b26:	f003 0307 	and.w	r3, r3, #7
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	6039      	str	r1, [r7, #0]
 8000b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	da0b      	bge.n	8000b64 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4c:	490d      	ldr	r1, [pc, #52]	; (8000b84 <NVIC_SetPriority+0x4c>)
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	f003 030f 	and.w	r3, r3, #15
 8000b54:	3b04      	subs	r3, #4
 8000b56:	683a      	ldr	r2, [r7, #0]
 8000b58:	b2d2      	uxtb	r2, r2
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b62:	e009      	b.n	8000b78 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	4908      	ldr	r1, [pc, #32]	; (8000b88 <NVIC_SetPriority+0x50>)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	683a      	ldr	r2, [r7, #0]
 8000b6c:	b2d2      	uxtb	r2, r2
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00
 8000b88:	e000e100 	.word	0xe000e100

08000b8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b089      	sub	sp, #36	; 0x24
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	f003 0307 	and.w	r3, r3, #7
 8000b9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba0:	69fb      	ldr	r3, [r7, #28]
 8000ba2:	f1c3 0307 	rsb	r3, r3, #7
 8000ba6:	2b04      	cmp	r3, #4
 8000ba8:	bf28      	it	cs
 8000baa:	2304      	movcs	r3, #4
 8000bac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	3304      	adds	r3, #4
 8000bb2:	2b06      	cmp	r3, #6
 8000bb4:	d902      	bls.n	8000bbc <NVIC_EncodePriority+0x30>
 8000bb6:	69fb      	ldr	r3, [r7, #28]
 8000bb8:	3b03      	subs	r3, #3
 8000bba:	e000      	b.n	8000bbe <NVIC_EncodePriority+0x32>
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc8:	1e5a      	subs	r2, r3, #1
 8000bca:	68bb      	ldr	r3, [r7, #8]
 8000bcc:	401a      	ands	r2, r3
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	1e59      	subs	r1, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f7ff ff90 	bl	8000b38 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff49 	bl	8000ad4 <NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff5e 	bl	8000b1c <NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff90 	bl	8000b8c <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5f 	bl	8000b38 <NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c8a:	6878      	ldr	r0, [r7, #4]
 8000c8c:	f7ff ffb0 	bl	8000bf0 <SysTick_Config>
 8000c90:	4603      	mov	r3, r0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
 8000cb6:	e165      	b.n	8000f84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb8:	2201      	movs	r2, #1
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f040 8154 	bne.w	8000f7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	685b      	ldr	r3, [r3, #4]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x4a>
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b12      	cmp	r3, #18
 8000ce4:	d123      	bne.n	8000d2e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	08da      	lsrs	r2, r3, #3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	3208      	adds	r2, #8
 8000cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	f003 0307 	and.w	r3, r3, #7
 8000cfa:	009b      	lsls	r3, r3, #2
 8000cfc:	220f      	movs	r2, #15
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	691a      	ldr	r2, [r3, #16]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f003 0307 	and.w	r3, r3, #7
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	69ba      	ldr	r2, [r7, #24]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	08da      	lsrs	r2, r3, #3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3208      	adds	r2, #8
 8000d28:	69b9      	ldr	r1, [r7, #24]
 8000d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	2203      	movs	r2, #3
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4013      	ands	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0203 	and.w	r2, r3, #3
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	005b      	lsls	r3, r3, #1
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	69ba      	ldr	r2, [r7, #24]
 8000d60:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	685b      	ldr	r3, [r3, #4]
 8000d66:	2b01      	cmp	r3, #1
 8000d68:	d00b      	beq.n	8000d82 <HAL_GPIO_Init+0xe6>
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d76:	2b11      	cmp	r3, #17
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b12      	cmp	r3, #18
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	689a      	ldr	r2, [r3, #8]
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	f000 80ae 	beq.w	8000f7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4a5c      	ldr	r2, [pc, #368]	; (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e28:	4b5b      	ldr	r3, [pc, #364]	; (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6453      	str	r3, [r2, #68]	; 0x44
 8000e32:	4b59      	ldr	r3, [pc, #356]	; (8000f98 <HAL_GPIO_Init+0x2fc>)
 8000e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3e:	4a57      	ldr	r2, [pc, #348]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	089b      	lsrs	r3, r3, #2
 8000e44:	3302      	adds	r3, #2
 8000e46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	220f      	movs	r2, #15
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a4e      	ldr	r2, [pc, #312]	; (8000fa0 <HAL_GPIO_Init+0x304>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d025      	beq.n	8000eb6 <HAL_GPIO_Init+0x21a>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4a4d      	ldr	r2, [pc, #308]	; (8000fa4 <HAL_GPIO_Init+0x308>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d01f      	beq.n	8000eb2 <HAL_GPIO_Init+0x216>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a4c      	ldr	r2, [pc, #304]	; (8000fa8 <HAL_GPIO_Init+0x30c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_GPIO_Init+0x212>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a4b      	ldr	r2, [pc, #300]	; (8000fac <HAL_GPIO_Init+0x310>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d013      	beq.n	8000eaa <HAL_GPIO_Init+0x20e>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4a      	ldr	r2, [pc, #296]	; (8000fb0 <HAL_GPIO_Init+0x314>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d00d      	beq.n	8000ea6 <HAL_GPIO_Init+0x20a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a49      	ldr	r2, [pc, #292]	; (8000fb4 <HAL_GPIO_Init+0x318>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d007      	beq.n	8000ea2 <HAL_GPIO_Init+0x206>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a48      	ldr	r2, [pc, #288]	; (8000fb8 <HAL_GPIO_Init+0x31c>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d101      	bne.n	8000e9e <HAL_GPIO_Init+0x202>
 8000e9a:	2306      	movs	r3, #6
 8000e9c:	e00c      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000e9e:	2307      	movs	r3, #7
 8000ea0:	e00a      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e008      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000ea6:	2304      	movs	r3, #4
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eaa:	2303      	movs	r3, #3
 8000eac:	e004      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eae:	2302      	movs	r3, #2
 8000eb0:	e002      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e000      	b.n	8000eb8 <HAL_GPIO_Init+0x21c>
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	69fa      	ldr	r2, [r7, #28]
 8000eba:	f002 0203 	and.w	r2, r2, #3
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	4093      	lsls	r3, r2
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ec8:	4934      	ldr	r1, [pc, #208]	; (8000f9c <HAL_GPIO_Init+0x300>)
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	089b      	lsrs	r3, r3, #2
 8000ece:	3302      	adds	r3, #2
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed6:	4b39      	ldr	r3, [pc, #228]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efa:	4a30      	ldr	r2, [pc, #192]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f00:	4b2e      	ldr	r3, [pc, #184]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d003      	beq.n	8000f24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f24:	4a25      	ldr	r2, [pc, #148]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000f26:	69bb      	ldr	r3, [r7, #24]
 8000f28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f2a:	4b24      	ldr	r3, [pc, #144]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f4e:	4a1b      	ldr	r2, [pc, #108]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f70:	69ba      	ldr	r2, [r7, #24]
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f78:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_GPIO_Init+0x320>)
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3301      	adds	r3, #1
 8000f82:	61fb      	str	r3, [r7, #28]
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	2b0f      	cmp	r3, #15
 8000f88:	f67f ae96 	bls.w	8000cb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f8c:	bf00      	nop
 8000f8e:	3724      	adds	r7, #36	; 0x24
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40023800 	.word	0x40023800
 8000f9c:	40013800 	.word	0x40013800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020400 	.word	0x40020400
 8000fa8:	40020800 	.word	0x40020800
 8000fac:	40020c00 	.word	0x40020c00
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40021400 	.word	0x40021400
 8000fb8:	40021800 	.word	0x40021800
 8000fbc:	40013c00 	.word	0x40013c00

08000fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	807b      	strh	r3, [r7, #2]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fd0:	787b      	ldrb	r3, [r7, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fd6:	887a      	ldrh	r2, [r7, #2]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fdc:	e003      	b.n	8000fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fde:	887b      	ldrh	r3, [r7, #2]
 8000fe0:	041a      	lsls	r2, r3, #16
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	619a      	str	r2, [r3, #24]
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
	...

08000ff4 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60fb      	str	r3, [r7, #12]
  uint32_t pclk1 = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_I2C_Init+0x1a>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0c8      	b.n	80011a0 <HAL_I2C_Init+0x1ac>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_I2C_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f001 fb38 	bl	8002698 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2224      	movs	r2, #36	; 0x24
 800102c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	6812      	ldr	r2, [r2, #0]
 8001038:	6812      	ldr	r2, [r2, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001040:	f000 f9a6 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001044:	60b8      	str	r0, [r7, #8]

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4a57      	ldr	r2, [pc, #348]	; (80011a8 <HAL_I2C_Init+0x1b4>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	0c9b      	lsrs	r3, r3, #18
 8001050:	60fb      	str	r3, [r7, #12]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	4952      	ldr	r1, [pc, #328]	; (80011ac <HAL_I2C_Init+0x1b8>)
 8001064:	428b      	cmp	r3, r1
 8001066:	d802      	bhi.n	800106e <HAL_I2C_Init+0x7a>
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	3301      	adds	r3, #1
 800106c:	e009      	b.n	8001082 <HAL_I2C_Init+0x8e>
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001074:	fb01 f303 	mul.w	r3, r1, r3
 8001078:	494d      	ldr	r1, [pc, #308]	; (80011b0 <HAL_I2C_Init+0x1bc>)
 800107a:	fba1 1303 	umull	r1, r3, r1, r3
 800107e:	099b      	lsrs	r3, r3, #6
 8001080:	3301      	adds	r3, #1
 8001082:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6819      	ldr	r1, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	4a47      	ldr	r2, [pc, #284]	; (80011ac <HAL_I2C_Init+0x1b8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d812      	bhi.n	80010b8 <HAL_I2C_Init+0xc4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	68ba      	ldr	r2, [r7, #8]
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010a2:	2b03      	cmp	r3, #3
 80010a4:	d906      	bls.n	80010b4 <HAL_I2C_Init+0xc0>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	e045      	b.n	8001140 <HAL_I2C_Init+0x14c>
 80010b4:	2304      	movs	r3, #4
 80010b6:	e043      	b.n	8001140 <HAL_I2C_Init+0x14c>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d10f      	bne.n	80010e0 <HAL_I2C_Init+0xec>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	68ba      	ldr	r2, [r7, #8]
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	bf0c      	ite	eq
 80010d8:	2301      	moveq	r3, #1
 80010da:	2300      	movne	r3, #0
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	e010      	b.n	8001102 <HAL_I2C_Init+0x10e>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	4613      	mov	r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	009a      	lsls	r2, r3, #2
 80010ec:	4413      	add	r3, r2
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf0c      	ite	eq
 80010fc:	2301      	moveq	r3, #1
 80010fe:	2300      	movne	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_I2C_Init+0x116>
 8001106:	2301      	movs	r3, #1
 8001108:	e01a      	b.n	8001140 <HAL_I2C_Init+0x14c>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d10a      	bne.n	8001128 <HAL_I2C_Init+0x134>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685a      	ldr	r2, [r3, #4]
 8001116:	4613      	mov	r3, r2
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	4413      	add	r3, r2
 800111c:	68ba      	ldr	r2, [r7, #8]
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001126:	e00b      	b.n	8001140 <HAL_I2C_Init+0x14c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	009a      	lsls	r2, r3, #2
 8001134:	4413      	add	r3, r2
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	fbb2 f3f3 	udiv	r3, r2, r3
 800113c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001140:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	69d1      	ldr	r1, [r2, #28]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	6a12      	ldr	r2, [r2, #32]
 800114e:	430a      	orrs	r2, r1
 8001150:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6911      	ldr	r1, [r2, #16]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68d2      	ldr	r2, [r2, #12]
 800115e:	430a      	orrs	r2, r1
 8001160:	609a      	str	r2, [r3, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	6951      	ldr	r1, [r2, #20]
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	6992      	ldr	r2, [r2, #24]
 800116e:	430a      	orrs	r2, r1
 8001170:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	6812      	ldr	r2, [r2, #0]
 800117c:	f042 0201 	orr.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2220      	movs	r2, #32
 800118c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	431bde83 	.word	0x431bde83
 80011ac:	000186a0 	.word	0x000186a0
 80011b0:	10624dd3 	.word	0x10624dd3

080011b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e0ca      	b.n	800135e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011c8:	4b67      	ldr	r3, [pc, #412]	; (8001368 <HAL_RCC_ClockConfig+0x1b4>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f003 020f 	and.w	r2, r3, #15
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d20c      	bcs.n	80011f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	4b64      	ldr	r3, [pc, #400]	; (8001368 <HAL_RCC_ClockConfig+0x1b4>)
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011de:	4b62      	ldr	r3, [pc, #392]	; (8001368 <HAL_RCC_ClockConfig+0x1b4>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 020f 	and.w	r2, r3, #15
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d001      	beq.n	80011f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0b6      	b.n	800135e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d020      	beq.n	800123e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0304 	and.w	r3, r3, #4
 8001204:	2b00      	cmp	r3, #0
 8001206:	d005      	beq.n	8001214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 800120a:	4b58      	ldr	r3, [pc, #352]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0308 	and.w	r3, r3, #8
 800121c:	2b00      	cmp	r3, #0
 800121e:	d005      	beq.n	800122c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001220:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001222:	4b52      	ldr	r3, [pc, #328]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800122a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800122c:	494f      	ldr	r1, [pc, #316]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 800122e:	4b4f      	ldr	r3, [pc, #316]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d044      	beq.n	80012d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d107      	bne.n	8001262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001252:	4b46      	ldr	r3, [pc, #280]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d119      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e07d      	b.n	800135e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d003      	beq.n	8001272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126e:	2b03      	cmp	r3, #3
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001272:	4b3e      	ldr	r3, [pc, #248]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e06d      	b.n	800135e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001282:	4b3a      	ldr	r3, [pc, #232]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e065      	b.n	800135e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001292:	4936      	ldr	r1, [pc, #216]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f023 0203 	bic.w	r2, r3, #3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a4:	f7ff f9a4 	bl	80005f0 <HAL_GetTick>
 80012a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012aa:	e00a      	b.n	80012c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ac:	f7ff f9a0 	bl	80005f0 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e04d      	b.n	800135e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c2:	4b2a      	ldr	r3, [pc, #168]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	f003 020c 	and.w	r2, r3, #12
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d1eb      	bne.n	80012ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012d4:	4b24      	ldr	r3, [pc, #144]	; (8001368 <HAL_RCC_ClockConfig+0x1b4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 020f 	and.w	r2, r3, #15
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	d90c      	bls.n	80012fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <HAL_RCC_ClockConfig+0x1b4>)
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	b2d2      	uxtb	r2, r2
 80012e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <HAL_RCC_ClockConfig+0x1b4>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 020f 	and.w	r2, r3, #15
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d001      	beq.n	80012fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e030      	b.n	800135e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0304 	and.w	r3, r3, #4
 8001304:	2b00      	cmp	r3, #0
 8001306:	d008      	beq.n	800131a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001308:	4918      	ldr	r1, [pc, #96]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001326:	4911      	ldr	r1, [pc, #68]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001328:	4b10      	ldr	r3, [pc, #64]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	00db      	lsls	r3, r3, #3
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800133a:	f000 f851 	bl	80013e0 <HAL_RCC_GetSysClockFreq>
 800133e:	4601      	mov	r1, r0
 8001340:	4b0a      	ldr	r3, [pc, #40]	; (800136c <HAL_RCC_ClockConfig+0x1b8>)
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	091b      	lsrs	r3, r3, #4
 8001346:	f003 030f 	and.w	r3, r3, #15
 800134a:	4a09      	ldr	r2, [pc, #36]	; (8001370 <HAL_RCC_ClockConfig+0x1bc>)
 800134c:	5cd3      	ldrb	r3, [r2, r3]
 800134e:	fa21 f303 	lsr.w	r3, r1, r3
 8001352:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff f906 	bl	8000568 <HAL_InitTick>

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00
 800136c:	40023800 	.word	0x40023800
 8001370:	0800294c 	.word	0x0800294c
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_RCC_GetHCLKFreq+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20000008 	.word	0x20000008

08001390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001394:	f7ff fff0 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 8001398:	4601      	mov	r1, r0
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	0a9b      	lsrs	r3, r3, #10
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	4a03      	ldr	r2, [pc, #12]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013a6:	5cd3      	ldrb	r3, [r2, r3]
 80013a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	0800295c 	.word	0x0800295c

080013b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013bc:	f7ff ffdc 	bl	8001378 <HAL_RCC_GetHCLKFreq>
 80013c0:	4601      	mov	r1, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	0b5b      	lsrs	r3, r3, #13
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4a03      	ldr	r2, [pc, #12]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80013ce:	5cd3      	ldrb	r3, [r2, r3]
 80013d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	0800295c 	.word	0x0800295c

080013e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013e4:	b0a1      	sub	sp, #132	; 0x84
 80013e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013fc:	4ba0      	ldr	r3, [pc, #640]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	2b0c      	cmp	r3, #12
 8001406:	f200 8193 	bhi.w	8001730 <HAL_RCC_GetSysClockFreq+0x350>
 800140a:	a201      	add	r2, pc, #4	; (adr r2, 8001410 <HAL_RCC_GetSysClockFreq+0x30>)
 800140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001410:	08001445 	.word	0x08001445
 8001414:	08001731 	.word	0x08001731
 8001418:	08001731 	.word	0x08001731
 800141c:	08001731 	.word	0x08001731
 8001420:	0800144b 	.word	0x0800144b
 8001424:	08001731 	.word	0x08001731
 8001428:	08001731 	.word	0x08001731
 800142c:	08001731 	.word	0x08001731
 8001430:	08001451 	.word	0x08001451
 8001434:	08001731 	.word	0x08001731
 8001438:	08001731 	.word	0x08001731
 800143c:	08001731 	.word	0x08001731
 8001440:	080015cd 	.word	0x080015cd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001444:	4b8f      	ldr	r3, [pc, #572]	; (8001684 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8001446:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8001448:	e175      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800144a:	4b8f      	ldr	r3, [pc, #572]	; (8001688 <HAL_RCC_GetSysClockFreq+0x2a8>)
 800144c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800144e:	e172      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001450:	4b8b      	ldr	r3, [pc, #556]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001458:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800145a:	4b89      	ldr	r3, [pc, #548]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001462:	2b00      	cmp	r3, #0
 8001464:	d056      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001466:	4b86      	ldr	r3, [pc, #536]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	099b      	lsrs	r3, r3, #6
 800146c:	f04f 0400 	mov.w	r4, #0
 8001470:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001474:	f04f 0200 	mov.w	r2, #0
 8001478:	ea01 0103 	and.w	r1, r1, r3
 800147c:	ea02 0204 	and.w	r2, r2, r4
 8001480:	460b      	mov	r3, r1
 8001482:	4614      	mov	r4, r2
 8001484:	0160      	lsls	r0, r4, #5
 8001486:	6678      	str	r0, [r7, #100]	; 0x64
 8001488:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800148a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800148e:	6678      	str	r0, [r7, #100]	; 0x64
 8001490:	015b      	lsls	r3, r3, #5
 8001492:	663b      	str	r3, [r7, #96]	; 0x60
 8001494:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8001498:	1a5b      	subs	r3, r3, r1
 800149a:	eb64 0402 	sbc.w	r4, r4, r2
 800149e:	01a0      	lsls	r0, r4, #6
 80014a0:	65f8      	str	r0, [r7, #92]	; 0x5c
 80014a2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80014a4:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 80014a8:	65f8      	str	r0, [r7, #92]	; 0x5c
 80014aa:	0198      	lsls	r0, r3, #6
 80014ac:	65b8      	str	r0, [r7, #88]	; 0x58
 80014ae:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 80014b2:	1aed      	subs	r5, r5, r3
 80014b4:	eb66 0604 	sbc.w	r6, r6, r4
 80014b8:	4633      	mov	r3, r6
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	657b      	str	r3, [r7, #84]	; 0x54
 80014be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c0:	4628      	mov	r0, r5
 80014c2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014c6:	657b      	str	r3, [r7, #84]	; 0x54
 80014c8:	462b      	mov	r3, r5
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	653b      	str	r3, [r7, #80]	; 0x50
 80014ce:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80014d2:	461d      	mov	r5, r3
 80014d4:	4626      	mov	r6, r4
 80014d6:	186b      	adds	r3, r5, r1
 80014d8:	eb46 0402 	adc.w	r4, r6, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	4621      	mov	r1, r4
 80014e0:	460b      	mov	r3, r1
 80014e2:	025b      	lsls	r3, r3, #9
 80014e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e8:	4602      	mov	r2, r0
 80014ea:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 80014ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014f0:	4603      	mov	r3, r0
 80014f2:	025b      	lsls	r3, r3, #9
 80014f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80014f6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80014fa:	4618      	mov	r0, r3
 80014fc:	4621      	mov	r1, r4
 80014fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001500:	f04f 0400 	mov.w	r4, #0
 8001504:	461a      	mov	r2, r3
 8001506:	4623      	mov	r3, r4
 8001508:	f7fe fe84 	bl	8000214 <__aeabi_uldivmod>
 800150c:	4603      	mov	r3, r0
 800150e:	460c      	mov	r4, r1
 8001510:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001512:	e04d      	b.n	80015b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001514:	4b5a      	ldr	r3, [pc, #360]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	099b      	lsrs	r3, r3, #6
 800151a:	f04f 0400 	mov.w	r4, #0
 800151e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	ea01 0103 	and.w	r1, r1, r3
 800152a:	ea02 0204 	and.w	r2, r2, r4
 800152e:	460b      	mov	r3, r1
 8001530:	4614      	mov	r4, r2
 8001532:	0160      	lsls	r0, r4, #5
 8001534:	6478      	str	r0, [r7, #68]	; 0x44
 8001536:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001538:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800153c:	6478      	str	r0, [r7, #68]	; 0x44
 800153e:	015b      	lsls	r3, r3, #5
 8001540:	643b      	str	r3, [r7, #64]	; 0x40
 8001542:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001546:	1a5b      	subs	r3, r3, r1
 8001548:	eb64 0402 	sbc.w	r4, r4, r2
 800154c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001550:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8001554:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8001558:	ebba 0a03 	subs.w	sl, sl, r3
 800155c:	eb6b 0b04 	sbc.w	fp, fp, r4
 8001560:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001564:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001568:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800156e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8001572:	63bb      	str	r3, [r7, #56]	; 0x38
 8001574:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8001578:	eb1a 0a01 	adds.w	sl, sl, r1
 800157c:	eb4b 0b02 	adc.w	fp, fp, r2
 8001580:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
 8001586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001588:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
 800158e:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8001592:	633b      	str	r3, [r7, #48]	; 0x30
 8001594:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001598:	4650      	mov	r0, sl
 800159a:	4659      	mov	r1, fp
 800159c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800159e:	f04f 0400 	mov.w	r4, #0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4623      	mov	r3, r4
 80015a6:	f7fe fe35 	bl	8000214 <__aeabi_uldivmod>
 80015aa:	4603      	mov	r3, r0
 80015ac:	460c      	mov	r4, r1
 80015ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015b0:	4b33      	ldr	r3, [pc, #204]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	0c1b      	lsrs	r3, r3, #16
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	3301      	adds	r3, #1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 80015c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80015c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80015c8:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80015ca:	e0b4      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015cc:	4b2c      	ldr	r3, [pc, #176]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015d4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015d6:	4b2a      	ldr	r3, [pc, #168]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d054      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_RCC_GetSysClockFreq+0x2a0>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	099b      	lsrs	r3, r3, #6
 80015e8:	f04f 0400 	mov.w	r4, #0
 80015ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	ea01 0103 	and.w	r1, r1, r3
 80015f8:	ea02 0204 	and.w	r2, r2, r4
 80015fc:	460b      	mov	r3, r1
 80015fe:	4614      	mov	r4, r2
 8001600:	0160      	lsls	r0, r4, #5
 8001602:	62f8      	str	r0, [r7, #44]	; 0x2c
 8001604:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001606:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800160a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800160c:	015b      	lsls	r3, r3, #5
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001610:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001614:	1a5b      	subs	r3, r3, r1
 8001616:	eb64 0402 	sbc.w	r4, r4, r2
 800161a:	ea4f 1984 	mov.w	r9, r4, lsl #6
 800161e:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001622:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8001626:	ebb8 0803 	subs.w	r8, r8, r3
 800162a:	eb69 0904 	sbc.w	r9, r9, r4
 800162e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
 800163c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001646:	eb18 0801 	adds.w	r8, r8, r1
 800164a:	eb49 0902 	adc.w	r9, r9, r2
 800164e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800165a:	61fb      	str	r3, [r7, #28]
 800165c:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001660:	61bb      	str	r3, [r7, #24]
 8001662:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001666:	4640      	mov	r0, r8
 8001668:	4649      	mov	r1, r9
 800166a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800166c:	f04f 0400 	mov.w	r4, #0
 8001670:	461a      	mov	r2, r3
 8001672:	4623      	mov	r3, r4
 8001674:	f7fe fdce 	bl	8000214 <__aeabi_uldivmod>
 8001678:	4603      	mov	r3, r0
 800167a:	460c      	mov	r4, r1
 800167c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800167e:	e04b      	b.n	8001718 <HAL_RCC_GetSysClockFreq+0x338>
 8001680:	40023800 	.word	0x40023800
 8001684:	00f42400 	.word	0x00f42400
 8001688:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168c:	4b2d      	ldr	r3, [pc, #180]	; (8001744 <HAL_RCC_GetSysClockFreq+0x364>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	f04f 0400 	mov.w	r4, #0
 8001696:	f240 11ff 	movw	r1, #511	; 0x1ff
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	ea01 0103 	and.w	r1, r1, r3
 80016a2:	ea02 0204 	and.w	r2, r2, r4
 80016a6:	460b      	mov	r3, r1
 80016a8:	4614      	mov	r4, r2
 80016aa:	0160      	lsls	r0, r4, #5
 80016ac:	6178      	str	r0, [r7, #20]
 80016ae:	6978      	ldr	r0, [r7, #20]
 80016b0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80016b4:	6178      	str	r0, [r7, #20]
 80016b6:	015b      	lsls	r3, r3, #5
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	eb64 0402 	sbc.w	r4, r4, r2
 80016c4:	01a6      	lsls	r6, r4, #6
 80016c6:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80016ca:	019d      	lsls	r5, r3, #6
 80016cc:	1aed      	subs	r5, r5, r3
 80016ce:	eb66 0604 	sbc.w	r6, r6, r4
 80016d2:	00f3      	lsls	r3, r6, #3
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	00eb      	lsls	r3, r5, #3
 80016e0:	60bb      	str	r3, [r7, #8]
 80016e2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80016e6:	186d      	adds	r5, r5, r1
 80016e8:	eb46 0602 	adc.w	r6, r6, r2
 80016ec:	02b3      	lsls	r3, r6, #10
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	02ab      	lsls	r3, r5, #10
 80016fa:	603b      	str	r3, [r7, #0]
 80016fc:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001700:	4628      	mov	r0, r5
 8001702:	4631      	mov	r1, r6
 8001704:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001706:	f04f 0400 	mov.w	r4, #0
 800170a:	461a      	mov	r2, r3
 800170c:	4623      	mov	r3, r4
 800170e:	f7fe fd81 	bl	8000214 <__aeabi_uldivmod>
 8001712:	4603      	mov	r3, r0
 8001714:	460c      	mov	r4, r1
 8001716:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001718:	4b0a      	ldr	r3, [pc, #40]	; (8001744 <HAL_RCC_GetSysClockFreq+0x364>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	0f1b      	lsrs	r3, r3, #28
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 8001724:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 800172e:	e002      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_RCC_GetSysClockFreq+0x368>)
 8001732:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001736:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001738:	4618      	mov	r0, r3
 800173a:	3784      	adds	r7, #132	; 0x84
 800173c:	46bd      	mov	sp, r7
 800173e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	00f42400 	.word	0x00f42400

0800174c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8083 	beq.w	800186c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001766:	4b95      	ldr	r3, [pc, #596]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d019      	beq.n	80017a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001772:	4b92      	ldr	r3, [pc, #584]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800177a:	2b08      	cmp	r3, #8
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800177e:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178a:	d00c      	beq.n	80017a6 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178c:	4b8b      	ldr	r3, [pc, #556]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001794:	2b0c      	cmp	r3, #12
 8001796:	d112      	bne.n	80017be <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001798:	4b88      	ldr	r3, [pc, #544]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4b85      	ldr	r3, [pc, #532]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d05b      	beq.n	800186a <HAL_RCC_OscConfig+0x11e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d157      	bne.n	800186a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e216      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x8a>
 80017c8:	4a7c      	ldr	r2, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017ca:	4b7c      	ldr	r3, [pc, #496]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e01d      	b.n	8001812 <HAL_RCC_OscConfig+0xc6>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0xae>
 80017e0:	4a76      	ldr	r2, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017e2:	4b76      	ldr	r3, [pc, #472]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4a73      	ldr	r2, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017ee:	4b73      	ldr	r3, [pc, #460]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e00b      	b.n	8001812 <HAL_RCC_OscConfig+0xc6>
 80017fa:	4a70      	ldr	r2, [pc, #448]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017fc:	4b6f      	ldr	r3, [pc, #444]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	4a6d      	ldr	r2, [pc, #436]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001808:	4b6c      	ldr	r3, [pc, #432]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001810:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d013      	beq.n	8001842 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800181a:	f7fe fee9 	bl	80005f0 <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001820:	e008      	b.n	8001834 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001822:	f7fe fee5 	bl	80005f0 <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b64      	cmp	r3, #100	; 0x64
 800182e:	d901      	bls.n	8001834 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e1db      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001834:	4b61      	ldr	r3, [pc, #388]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0f0      	beq.n	8001822 <HAL_RCC_OscConfig+0xd6>
 8001840:	e014      	b.n	800186c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7fe fed5 	bl	80005f0 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800184a:	f7fe fed1 	bl	80005f0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b64      	cmp	r3, #100	; 0x64
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e1c7      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185c:	4b57      	ldr	r3, [pc, #348]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d1f0      	bne.n	800184a <HAL_RCC_OscConfig+0xfe>
 8001868:	e000      	b.n	800186c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d06f      	beq.n	8001958 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001878:	4b50      	ldr	r3, [pc, #320]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b00      	cmp	r3, #0
 8001882:	d017      	beq.n	80018b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001884:	4b4d      	ldr	r3, [pc, #308]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800188c:	2b08      	cmp	r3, #8
 800188e:	d105      	bne.n	800189c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d00b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800189c:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d11c      	bne.n	80018e2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018a8:	4b44      	ldr	r3, [pc, #272]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d116      	bne.n	80018e2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <HAL_RCC_OscConfig+0x180>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d001      	beq.n	80018cc <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e18f      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018cc:	493b      	ldr	r1, [pc, #236]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018ce:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4313      	orrs	r3, r2
 80018de:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e0:	e03a      	b.n	8001958 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	68db      	ldr	r3, [r3, #12]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d020      	beq.n	800192c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ea:	4b35      	ldr	r3, [pc, #212]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7fe fe7e 	bl	80005f0 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018f8:	f7fe fe7a 	bl	80005f0 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e170      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800190a:	4b2c      	ldr	r3, [pc, #176]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d0f0      	beq.n	80018f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001916:	4929      	ldr	r1, [pc, #164]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 8001918:	4b28      	ldr	r3, [pc, #160]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	4313      	orrs	r3, r2
 8001928:	600b      	str	r3, [r1, #0]
 800192a:	e015      	b.n	8001958 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800192c:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <HAL_RCC_OscConfig+0x274>)
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7fe fe5d 	bl	80005f0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800193a:	f7fe fe59 	bl	80005f0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e14f      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0302 	and.w	r3, r3, #2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d037      	beq.n	80019d4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d016      	beq.n	800199a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800196e:	2201      	movs	r2, #1
 8001970:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7fe fe3d 	bl	80005f0 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197a:	f7fe fe39 	bl	80005f0 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e12f      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_RCC_OscConfig+0x270>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0f0      	beq.n	800197a <HAL_RCC_OscConfig+0x22e>
 8001998:	e01c      	b.n	80019d4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCC_OscConfig+0x278>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a0:	f7fe fe26 	bl	80005f0 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a6:	e00f      	b.n	80019c8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a8:	f7fe fe22 	bl	80005f0 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d908      	bls.n	80019c8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e118      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	42470000 	.word	0x42470000
 80019c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c8:	4b8a      	ldr	r3, [pc, #552]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 80019ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1e9      	bne.n	80019a8 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8097 	beq.w	8001b10 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e2:	2300      	movs	r3, #0
 80019e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e6:	4b83      	ldr	r3, [pc, #524]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10f      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
 80019f6:	4a7f      	ldr	r2, [pc, #508]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 80019f8:	4b7e      	ldr	r3, [pc, #504]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6413      	str	r3, [r2, #64]	; 0x40
 8001a02:	4b7c      	ldr	r3, [pc, #496]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a12:	4b79      	ldr	r3, [pc, #484]	; (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d118      	bne.n	8001a50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a1e:	4a76      	ldr	r2, [pc, #472]	; (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	4b75      	ldr	r3, [pc, #468]	; (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a2a:	f7fe fde1 	bl	80005f0 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a32:	f7fe fddd 	bl	80005f0 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0d3      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a44:	4b6c      	ldr	r3, [pc, #432]	; (8001bf8 <HAL_RCC_OscConfig+0x4ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d0f0      	beq.n	8001a32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x31a>
 8001a58:	4a66      	ldr	r2, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a5a:	4b66      	ldr	r3, [pc, #408]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6713      	str	r3, [r2, #112]	; 0x70
 8001a64:	e01c      	b.n	8001aa0 <HAL_RCC_OscConfig+0x354>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	689b      	ldr	r3, [r3, #8]
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x33c>
 8001a6e:	4a61      	ldr	r2, [pc, #388]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a70:	4b60      	ldr	r3, [pc, #384]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6713      	str	r3, [r2, #112]	; 0x70
 8001a7a:	4a5e      	ldr	r2, [pc, #376]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a7c:	4b5d      	ldr	r3, [pc, #372]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6713      	str	r3, [r2, #112]	; 0x70
 8001a86:	e00b      	b.n	8001aa0 <HAL_RCC_OscConfig+0x354>
 8001a88:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a8a:	4b5a      	ldr	r3, [pc, #360]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	; 0x70
 8001a94:	4a57      	ldr	r2, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f023 0304 	bic.w	r3, r3, #4
 8001a9e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d015      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7fe fda2 	bl	80005f0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7fe fd9e 	bl	80005f0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e092      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0ee      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x364>
 8001ad2:	e014      	b.n	8001afe <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad4:	f7fe fd8c 	bl	80005f0 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001adc:	f7fe fd88 	bl	80005f0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e07c      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af2:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1ee      	bne.n	8001adc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4a3b      	ldr	r2, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001b06:	4b3b      	ldr	r3, [pc, #236]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d068      	beq.n	8001bea <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b18:	4b36      	ldr	r3, [pc, #216]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 030c 	and.w	r3, r3, #12
 8001b20:	2b08      	cmp	r3, #8
 8001b22:	d060      	beq.n	8001be6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d145      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_OscConfig+0x4b0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b32:	f7fe fd5d 	bl	80005f0 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b38:	e008      	b.n	8001b4c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b3a:	f7fe fd59 	bl	80005f0 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d901      	bls.n	8001b4c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e04f      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4c:	4b29      	ldr	r3, [pc, #164]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1f0      	bne.n	8001b3a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b58:	4926      	ldr	r1, [pc, #152]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	69da      	ldr	r2, [r3, #28]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	019b      	lsls	r3, r3, #6
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b70:	085b      	lsrs	r3, r3, #1
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	431a      	orrs	r2, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	061b      	lsls	r3, r3, #24
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	071b      	lsls	r3, r3, #28
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b8a:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <HAL_RCC_OscConfig+0x4b0>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7fe fd2e 	bl	80005f0 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b98:	f7fe fd2a 	bl	80005f0 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e020      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x44c>
 8001bb6:	e018      	b.n	8001bea <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb8:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <HAL_RCC_OscConfig+0x4b0>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bbe:	f7fe fd17 	bl	80005f0 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc6:	f7fe fd13 	bl	80005f0 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e009      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd8:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <HAL_RCC_OscConfig+0x4a8>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f0      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x47a>
 8001be4:	e001      	b.n	8001bea <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	42470060 	.word	0x42470060

08001c00 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e03f      	b.n	8001c92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d106      	bne.n	8001c2c <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fd7e 	bl	8002728 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2224      	movs	r2, #36	; 0x24
 8001c30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6812      	ldr	r2, [r2, #0]
 8001c3c:	68d2      	ldr	r2, [r2, #12]
 8001c3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c42:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f90b 	bl	8001e60 <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6812      	ldr	r2, [r2, #0]
 8001c52:	6912      	ldr	r2, [r2, #16]
 8001c54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	6952      	ldr	r2, [r2, #20]
 8001c64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c68:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6812      	ldr	r2, [r2, #0]
 8001c72:	68d2      	ldr	r2, [r2, #12]
 8001c74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c78:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2220      	movs	r2, #32
 8001c8c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b088      	sub	sp, #32
 8001c9e:	af02      	add	r7, sp, #8
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
  
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY) 
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b20      	cmp	r3, #32
 8001cb8:	f040 8082 	bne.w	8001dc0 <HAL_UART_Transmit+0x126>
  {
    if((pData == NULL ) || (Size == 0)) 
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_UART_Transmit+0x2e>
 8001cc2:	88fb      	ldrh	r3, [r7, #6]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e07a      	b.n	8001dc2 <HAL_UART_Transmit+0x128>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_UART_Transmit+0x40>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e073      	b.n	8001dc2 <HAL_UART_Transmit+0x128>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2221      	movs	r2, #33	; 0x21
 8001cec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	
    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001cf0:	f7fe fc7e 	bl	80005f0 <HAL_GetTick>
 8001cf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	88fa      	ldrh	r2, [r7, #6]
 8001d00:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 8001d02:	e041      	b.n	8001d88 <HAL_UART_Transmit+0xee>
    {
      huart->TxXferCount--;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1a:	d121      	bne.n	8001d60 <HAL_UART_Transmit+0xc6>
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2200      	movs	r2, #0
 8001d24:	2180      	movs	r1, #128	; 0x80
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f84f 	bl	8001dca <UART_WaitOnFlagUntilTimeout>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_UART_Transmit+0x9c>
        { 
          return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e045      	b.n	8001dc2 <HAL_UART_Transmit+0x128>
        }
        tmp = (uint16_t*) pData;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	8812      	ldrh	r2, [r2, #0]
 8001d42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d46:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d103      	bne.n	8001d58 <HAL_UART_Transmit+0xbe>
        {
          pData +=2U;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	3302      	adds	r3, #2
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	e017      	b.n	8001d88 <HAL_UART_Transmit+0xee>
        }
        else
        { 
          pData +=1U;
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	e013      	b.n	8001d88 <HAL_UART_Transmit+0xee>
        }
      } 
      else
      {
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	2200      	movs	r2, #0
 8001d68:	2180      	movs	r1, #128	; 0x80
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 f82d 	bl	8001dca <UART_WaitOnFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <HAL_UART_Transmit+0xe0>
        {
          return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e023      	b.n	8001dc2 <HAL_UART_Transmit+0x128>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1c59      	adds	r1, r3, #1
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	6053      	str	r3, [r2, #4]
    while(huart->TxXferCount > 0U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1b8      	bne.n	8001d04 <HAL_UART_Transmit+0x6a>
      } 
    }
    
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2140      	movs	r1, #64	; 0x40
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 f814 	bl	8001dca <UART_WaitOnFlagUntilTimeout>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <HAL_UART_Transmit+0x112>
    { 
      return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e00a      	b.n	8001dc2 <HAL_UART_Transmit+0x128>
    }
    
    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2220      	movs	r2, #32
 8001db0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	e000      	b.n	8001dc2 <HAL_UART_Transmit+0x128>
  }
  else
  {
    return HAL_BUSY;
 8001dc0:	2302      	movs	r3, #2
  }
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	60f8      	str	r0, [r7, #12]
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001dda:	e02c      	b.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001ddc:	69bb      	ldr	r3, [r7, #24]
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de2:	d028      	beq.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d007      	beq.n	8001dfa <UART_WaitOnFlagUntilTimeout+0x30>
 8001dea:	f7fe fc01 	bl	80005f0 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	1ad2      	subs	r2, r2, r3
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d91d      	bls.n	8001e36 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	6812      	ldr	r2, [r2, #0]
 8001e02:	68d2      	ldr	r2, [r2, #12]
 8001e04:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e08:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	6952      	ldr	r2, [r2, #20]
 8001e14:	f022 0201 	bic.w	r2, r2, #1
 8001e18:	615a      	str	r2, [r3, #20]
        
        huart->gState  = HAL_UART_STATE_READY;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        
        return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e00f      	b.n	8001e56 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	401a      	ands	r2, r3
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	bf0c      	ite	eq
 8001e46:	2301      	moveq	r3, #1
 8001e48:	2300      	movne	r3, #0
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d0c3      	beq.n	8001ddc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e7a:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e9c:	f023 030c 	bic.w	r3, r3, #12
 8001ea0:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ed4:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ef0:	f040 80e4 	bne.w	80020bc <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4aab      	ldr	r2, [pc, #684]	; (80021a8 <UART_SetConfig+0x348>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <UART_SetConfig+0xa8>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4aaa      	ldr	r2, [pc, #680]	; (80021ac <UART_SetConfig+0x34c>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d16c      	bne.n	8001fe2 <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681c      	ldr	r4, [r3, #0]
 8001f0c:	f7ff fa54 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001f10:	4602      	mov	r2, r0
 8001f12:	4613      	mov	r3, r2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	009a      	lsls	r2, r3, #2
 8001f1a:	441a      	add	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4aa2      	ldr	r2, [pc, #648]	; (80021b0 <UART_SetConfig+0x350>)
 8001f28:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	011d      	lsls	r5, r3, #4
 8001f30:	f7ff fa42 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001f34:	4602      	mov	r2, r0
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009a      	lsls	r2, r3, #2
 8001f3e:	441a      	add	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fbb2 f6f3 	udiv	r6, r2, r3
 8001f4a:	f7ff fa35 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4613      	mov	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	009a      	lsls	r2, r3, #2
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f64:	4a92      	ldr	r2, [pc, #584]	; (80021b0 <UART_SetConfig+0x350>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	095b      	lsrs	r3, r3, #5
 8001f6c:	2264      	movs	r2, #100	; 0x64
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	1af3      	subs	r3, r6, r3
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	3332      	adds	r3, #50	; 0x32
 8001f78:	4a8d      	ldr	r2, [pc, #564]	; (80021b0 <UART_SetConfig+0x350>)
 8001f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f7e:	095b      	lsrs	r3, r3, #5
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f86:	441d      	add	r5, r3
 8001f88:	f7ff fa16 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	4613      	mov	r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	4413      	add	r3, r2
 8001f94:	009a      	lsls	r2, r3, #2
 8001f96:	441a      	add	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	fbb2 f6f3 	udiv	r6, r2, r3
 8001fa2:	f7ff fa09 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4613      	mov	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	4413      	add	r3, r2
 8001fae:	009a      	lsls	r2, r3, #2
 8001fb0:	441a      	add	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fbc:	4a7c      	ldr	r2, [pc, #496]	; (80021b0 <UART_SetConfig+0x350>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	2264      	movs	r2, #100	; 0x64
 8001fc6:	fb02 f303 	mul.w	r3, r2, r3
 8001fca:	1af3      	subs	r3, r6, r3
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	3332      	adds	r3, #50	; 0x32
 8001fd0:	4a77      	ldr	r2, [pc, #476]	; (80021b0 <UART_SetConfig+0x350>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	095b      	lsrs	r3, r3, #5
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	442b      	add	r3, r5
 8001fde:	60a3      	str	r3, [r4, #8]
 8001fe0:	e154      	b.n	800228c <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681c      	ldr	r4, [r3, #0]
 8001fe6:	f7ff f9d3 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8001fea:	4602      	mov	r2, r0
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009a      	lsls	r2, r3, #2
 8001ff4:	441a      	add	r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002000:	4a6b      	ldr	r2, [pc, #428]	; (80021b0 <UART_SetConfig+0x350>)
 8002002:	fba2 2303 	umull	r2, r3, r2, r3
 8002006:	095b      	lsrs	r3, r3, #5
 8002008:	011d      	lsls	r5, r3, #4
 800200a:	f7ff f9c1 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 800200e:	4602      	mov	r2, r0
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	009a      	lsls	r2, r3, #2
 8002018:	441a      	add	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fbb2 f6f3 	udiv	r6, r2, r3
 8002024:	f7ff f9b4 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8002028:	4602      	mov	r2, r0
 800202a:	4613      	mov	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4413      	add	r3, r2
 8002030:	009a      	lsls	r2, r3, #2
 8002032:	441a      	add	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	4a5c      	ldr	r2, [pc, #368]	; (80021b0 <UART_SetConfig+0x350>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	095b      	lsrs	r3, r3, #5
 8002046:	2264      	movs	r2, #100	; 0x64
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	1af3      	subs	r3, r6, r3
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	3332      	adds	r3, #50	; 0x32
 8002052:	4a57      	ldr	r2, [pc, #348]	; (80021b0 <UART_SetConfig+0x350>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002060:	441d      	add	r5, r3
 8002062:	f7ff f995 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8002066:	4602      	mov	r2, r0
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009a      	lsls	r2, r3, #2
 8002070:	441a      	add	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fbb2 f6f3 	udiv	r6, r2, r3
 800207c:	f7ff f988 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8002080:	4602      	mov	r2, r0
 8002082:	4613      	mov	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	4413      	add	r3, r2
 8002088:	009a      	lsls	r2, r3, #2
 800208a:	441a      	add	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	4a46      	ldr	r2, [pc, #280]	; (80021b0 <UART_SetConfig+0x350>)
 8002098:	fba2 2303 	umull	r2, r3, r2, r3
 800209c:	095b      	lsrs	r3, r3, #5
 800209e:	2264      	movs	r2, #100	; 0x64
 80020a0:	fb02 f303 	mul.w	r3, r2, r3
 80020a4:	1af3      	subs	r3, r6, r3
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	3332      	adds	r3, #50	; 0x32
 80020aa:	4a41      	ldr	r2, [pc, #260]	; (80021b0 <UART_SetConfig+0x350>)
 80020ac:	fba2 2303 	umull	r2, r3, r2, r3
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	442b      	add	r3, r5
 80020b8:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80020ba:	e0e7      	b.n	800228c <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a39      	ldr	r2, [pc, #228]	; (80021a8 <UART_SetConfig+0x348>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d004      	beq.n	80020d0 <UART_SetConfig+0x270>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a38      	ldr	r2, [pc, #224]	; (80021ac <UART_SetConfig+0x34c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d171      	bne.n	80021b4 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681c      	ldr	r4, [r3, #0]
 80020d4:	f7ff f970 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80020d8:	4602      	mov	r2, r0
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009a      	lsls	r2, r3, #2
 80020e2:	441a      	add	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <UART_SetConfig+0x350>)
 80020f0:	fba2 2303 	umull	r2, r3, r2, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	011d      	lsls	r5, r3, #4
 80020f8:	f7ff f95e 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	009a      	lsls	r2, r3, #2
 8002106:	441a      	add	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002112:	f7ff f951 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8002116:	4602      	mov	r2, r0
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	009a      	lsls	r2, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <UART_SetConfig+0x350>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	095b      	lsrs	r3, r3, #5
 8002134:	2264      	movs	r2, #100	; 0x64
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	1af3      	subs	r3, r6, r3
 800213c:	011b      	lsls	r3, r3, #4
 800213e:	3332      	adds	r3, #50	; 0x32
 8002140:	4a1b      	ldr	r2, [pc, #108]	; (80021b0 <UART_SetConfig+0x350>)
 8002142:	fba2 2303 	umull	r2, r3, r2, r3
 8002146:	095b      	lsrs	r3, r3, #5
 8002148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800214c:	441d      	add	r5, r3
 800214e:	f7ff f933 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 8002152:	4602      	mov	r2, r0
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	009a      	lsls	r2, r3, #2
 800215c:	441a      	add	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fbb2 f6f3 	udiv	r6, r2, r3
 8002168:	f7ff f926 	bl	80013b8 <HAL_RCC_GetPCLK2Freq>
 800216c:	4602      	mov	r2, r0
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	009a      	lsls	r2, r3, #2
 8002176:	441a      	add	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002182:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <UART_SetConfig+0x350>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	095b      	lsrs	r3, r3, #5
 800218a:	2264      	movs	r2, #100	; 0x64
 800218c:	fb02 f303 	mul.w	r3, r2, r3
 8002190:	1af3      	subs	r3, r6, r3
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	3332      	adds	r3, #50	; 0x32
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <UART_SetConfig+0x350>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	095b      	lsrs	r3, r3, #5
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	442b      	add	r3, r5
 80021a4:	60a3      	str	r3, [r4, #8]
 80021a6:	e071      	b.n	800228c <UART_SetConfig+0x42c>
 80021a8:	40011000 	.word	0x40011000
 80021ac:	40011400 	.word	0x40011400
 80021b0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681c      	ldr	r4, [r3, #0]
 80021b8:	f7ff f8ea 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4613      	mov	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	009a      	lsls	r2, r3, #2
 80021c6:	441a      	add	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d2:	4a30      	ldr	r2, [pc, #192]	; (8002294 <UART_SetConfig+0x434>)
 80021d4:	fba2 2303 	umull	r2, r3, r2, r3
 80021d8:	095b      	lsrs	r3, r3, #5
 80021da:	011d      	lsls	r5, r3, #4
 80021dc:	f7ff f8d8 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80021e0:	4602      	mov	r2, r0
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009a      	lsls	r2, r3, #2
 80021ea:	441a      	add	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80021f6:	f7ff f8cb 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 80021fa:	4602      	mov	r2, r0
 80021fc:	4613      	mov	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	4413      	add	r3, r2
 8002202:	009a      	lsls	r2, r3, #2
 8002204:	441a      	add	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	4a20      	ldr	r2, [pc, #128]	; (8002294 <UART_SetConfig+0x434>)
 8002212:	fba2 2303 	umull	r2, r3, r2, r3
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	2264      	movs	r2, #100	; 0x64
 800221a:	fb02 f303 	mul.w	r3, r2, r3
 800221e:	1af3      	subs	r3, r6, r3
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	3332      	adds	r3, #50	; 0x32
 8002224:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <UART_SetConfig+0x434>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	095b      	lsrs	r3, r3, #5
 800222c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002230:	441d      	add	r5, r3
 8002232:	f7ff f8ad 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8002236:	4602      	mov	r2, r0
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	009a      	lsls	r2, r3, #2
 8002240:	441a      	add	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	fbb2 f6f3 	udiv	r6, r2, r3
 800224c:	f7ff f8a0 	bl	8001390 <HAL_RCC_GetPCLK1Freq>
 8002250:	4602      	mov	r2, r0
 8002252:	4613      	mov	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	009a      	lsls	r2, r3, #2
 800225a:	441a      	add	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <UART_SetConfig+0x434>)
 8002268:	fba2 2303 	umull	r2, r3, r2, r3
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	2264      	movs	r2, #100	; 0x64
 8002270:	fb02 f303 	mul.w	r3, r2, r3
 8002274:	1af3      	subs	r3, r6, r3
 8002276:	011b      	lsls	r3, r3, #4
 8002278:	3332      	adds	r3, #50	; 0x32
 800227a:	4a06      	ldr	r2, [pc, #24]	; (8002294 <UART_SetConfig+0x434>)
 800227c:	fba2 2303 	umull	r2, r3, r2, r3
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	442b      	add	r3, r5
 8002288:	60a3      	str	r3, [r4, #8]
}
 800228a:	e7ff      	b.n	800228c <UART_SetConfig+0x42c>
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002294:	51eb851f 	.word	0x51eb851f

08002298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800229e:	f7fe f941 	bl	8000524 <HAL_Init>
  /* USER CODE BEGIN Init */
//
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022a2:	f000 f81f 	bl	80022e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
//
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022a6:	f000 f935 	bl	8002514 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80022aa:	f000 f909 	bl	80024c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80022ae:	f000 f887 	bl	80023c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80022b2:	f000 f8d7 	bl	8002464 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  uint8_t msg1[] = "ABCCC";
 80022b6:	4a09      	ldr	r2, [pc, #36]	; (80022dc <main+0x44>)
 80022b8:	463b      	mov	r3, r7
 80022ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80022be:	6018      	str	r0, [r3, #0]
 80022c0:	3304      	adds	r3, #4
 80022c2:	8019      	strh	r1, [r3, #0]
	  HAL_UART_Transmit(&huart2, msg1, strlen((char*)msg1), 5) ;
 80022c4:	463b      	mov	r3, r7
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fd ff9c 	bl	8000204 <strlen>
 80022cc:	4603      	mov	r3, r0
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4639      	mov	r1, r7
 80022d2:	2305      	movs	r3, #5
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <main+0x48>)
 80022d6:	f7ff fce0 	bl	8001c9a <HAL_UART_Transmit>
  {
 80022da:	e7ec      	b.n	80022b6 <main+0x1e>
 80022dc:	08002944 	.word	0x08002944
 80022e0:	200000c8 	.word	0x200000c8

080022e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b094      	sub	sp, #80	; 0x50
 80022e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	2234      	movs	r2, #52	; 0x34
 80022f0:	2100      	movs	r1, #0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f000 fb12 	bl	800291c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022f8:	f107 0308 	add.w	r3, r7, #8
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]
 8002306:	611a      	str	r2, [r3, #16]

  /**Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002308:	2300      	movs	r3, #0
 800230a:	607b      	str	r3, [r7, #4]
 800230c:	4a2a      	ldr	r2, [pc, #168]	; (80023b8 <SystemClock_Config+0xd4>)
 800230e:	4b2a      	ldr	r3, [pc, #168]	; (80023b8 <SystemClock_Config+0xd4>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002316:	6413      	str	r3, [r2, #64]	; 0x40
 8002318:	4b27      	ldr	r3, [pc, #156]	; (80023b8 <SystemClock_Config+0xd4>)
 800231a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002324:	2300      	movs	r3, #0
 8002326:	603b      	str	r3, [r7, #0]
 8002328:	4a24      	ldr	r2, [pc, #144]	; (80023bc <SystemClock_Config+0xd8>)
 800232a:	4b24      	ldr	r3, [pc, #144]	; (80023bc <SystemClock_Config+0xd8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002332:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b20      	ldr	r3, [pc, #128]	; (80023bc <SystemClock_Config+0xd8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002344:	2302      	movs	r3, #2
 8002346:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002348:	2301      	movs	r3, #1
 800234a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800234c:	2310      	movs	r3, #16
 800234e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002350:	2302      	movs	r3, #2
 8002352:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002354:	2300      	movs	r3, #0
 8002356:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002358:	2310      	movs	r3, #16
 800235a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800235c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8002360:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002362:	2304      	movs	r3, #4
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002366:	2302      	movs	r3, #2
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800236a:	2302      	movs	r3, #2
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800236e:	f107 031c 	add.w	r3, r7, #28
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f9ea 	bl	800174c <HAL_RCC_OscConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800237e:	f000 f939 	bl	80025f4 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002382:	230f      	movs	r3, #15
 8002384:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002386:	2302      	movs	r3, #2
 8002388:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800238a:	2300      	movs	r3, #0
 800238c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800238e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002392:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002394:	2300      	movs	r3, #0
 8002396:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	2102      	movs	r1, #2
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe ff08 	bl	80011b4 <HAL_RCC_ClockConfig>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80023aa:	f000 f923 	bl	80025f4 <Error_Handler>
  }
}
 80023ae:	bf00      	nop
 80023b0:	3750      	adds	r7, #80	; 0x50
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800
 80023bc:	40007000 	.word	0x40007000

080023c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023c6:	463b      	mov	r3, r7
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	609a      	str	r2, [r3, #8]
 80023d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80023d2:	4b20      	ldr	r3, [pc, #128]	; (8002454 <MX_ADC1_Init+0x94>)
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <MX_ADC1_Init+0x98>)
 80023d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <MX_ADC1_Init+0x94>)
 80023da:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80023de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80023e0:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <MX_ADC1_Init+0x94>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80023e6:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_ADC1_Init+0x94>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80023ec:	4b19      	ldr	r3, [pc, #100]	; (8002454 <MX_ADC1_Init+0x94>)
 80023ee:	2201      	movs	r2, #1
 80023f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80023f2:	4b18      	ldr	r3, [pc, #96]	; (8002454 <MX_ADC1_Init+0x94>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80023f8:	4b16      	ldr	r3, [pc, #88]	; (8002454 <MX_ADC1_Init+0x94>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80023fe:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_ADC1_Init+0x94>)
 8002400:	4a16      	ldr	r2, [pc, #88]	; (800245c <MX_ADC1_Init+0x9c>)
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002404:	4b13      	ldr	r3, [pc, #76]	; (8002454 <MX_ADC1_Init+0x94>)
 8002406:	2200      	movs	r2, #0
 8002408:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_ADC1_Init+0x94>)
 800240c:	2201      	movs	r2, #1
 800240e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002410:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_ADC1_Init+0x94>)
 8002412:	2200      	movs	r2, #0
 8002414:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <MX_ADC1_Init+0x94>)
 8002418:	2201      	movs	r2, #1
 800241a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800241c:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_ADC1_Init+0x94>)
 800241e:	f7fe f8f3 	bl	8000608 <HAL_ADC_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002428:	f000 f8e4 	bl	80025f4 <Error_Handler>
  }
  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800242c:	4b0c      	ldr	r3, [pc, #48]	; (8002460 <MX_ADC1_Init+0xa0>)
 800242e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002430:	2301      	movs	r3, #1
 8002432:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002434:	2300      	movs	r3, #0
 8002436:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002438:	463b      	mov	r3, r7
 800243a:	4619      	mov	r1, r3
 800243c:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_ADC1_Init+0x94>)
 800243e:	f7fe f927 	bl	8000690 <HAL_ADC_ConfigChannel>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8002448:	f000 f8d4 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800244c:	bf00      	nop
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	20000080 	.word	0x20000080
 8002458:	40012000 	.word	0x40012000
 800245c:	0f000001 	.word	0x0f000001
 8002460:	10000012 	.word	0x10000012

08002464 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002468:	4b12      	ldr	r3, [pc, #72]	; (80024b4 <MX_I2C1_Init+0x50>)
 800246a:	4a13      	ldr	r2, [pc, #76]	; (80024b8 <MX_I2C1_Init+0x54>)
 800246c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002470:	4a12      	ldr	r2, [pc, #72]	; (80024bc <MX_I2C1_Init+0x58>)
 8002472:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002476:	2200      	movs	r2, #0
 8002478:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_I2C1_Init+0x50>)
 800247c:	2200      	movs	r2, #0
 800247e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002482:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002486:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MX_I2C1_Init+0x50>)
 800248a:	2200      	movs	r2, #0
 800248c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800248e:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002494:	4b07      	ldr	r3, [pc, #28]	; (80024b4 <MX_I2C1_Init+0x50>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800249a:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_I2C1_Init+0x50>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80024a0:	4804      	ldr	r0, [pc, #16]	; (80024b4 <MX_I2C1_Init+0x50>)
 80024a2:	f7fe fda7 	bl	8000ff4 <HAL_I2C_Init>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80024ac:	f000 f8a2 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	2000002c 	.word	0x2000002c
 80024b8:	40005400 	.word	0x40005400
 80024bc:	000186a0 	.word	0x000186a0

080024c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024c4:	4b11      	ldr	r3, [pc, #68]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	; (8002510 <MX_USART2_UART_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ca:	4b10      	ldr	r3, [pc, #64]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_USART2_UART_Init+0x4c>)
 80024f8:	f7ff fb82 	bl	8001c00 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002502:	f000 f877 	bl	80025f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200000c8 	.word	0x200000c8
 8002510:	40004400 	.word	0x40004400

08002514 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251a:	f107 0314 	add.w	r3, r7, #20
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
 8002528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
 800252e:	4a2d      	ldr	r2, [pc, #180]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002530:	4b2c      	ldr	r3, [pc, #176]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002534:	f043 0304 	orr.w	r3, r3, #4
 8002538:	6313      	str	r3, [r2, #48]	; 0x30
 800253a:	4b2a      	ldr	r3, [pc, #168]	; (80025e4 <MX_GPIO_Init+0xd0>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4a26      	ldr	r2, [pc, #152]	; (80025e4 <MX_GPIO_Init+0xd0>)
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <MX_GPIO_Init+0xd0>)
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002554:	6313      	str	r3, [r2, #48]	; 0x30
 8002556:	4b23      	ldr	r3, [pc, #140]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4a1f      	ldr	r2, [pc, #124]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002568:	4b1e      	ldr	r3, [pc, #120]	; (80025e4 <MX_GPIO_Init+0xd0>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002584:	4b17      	ldr	r3, [pc, #92]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b15      	ldr	r3, [pc, #84]	; (80025e4 <MX_GPIO_Init+0xd0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	607b      	str	r3, [r7, #4]
 8002598:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	2121      	movs	r1, #33	; 0x21
 800259e:	4812      	ldr	r0, [pc, #72]	; (80025e8 <MX_GPIO_Init+0xd4>)
 80025a0:	f7fe fd0e 	bl	8000fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80025a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <MX_GPIO_Init+0xd8>)
 80025ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025b2:	f107 0314 	add.w	r3, r7, #20
 80025b6:	4619      	mov	r1, r3
 80025b8:	480d      	ldr	r0, [pc, #52]	; (80025f0 <MX_GPIO_Init+0xdc>)
 80025ba:	f7fe fb6f 	bl	8000c9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD2_Pin;
 80025be:	2321      	movs	r3, #33	; 0x21
 80025c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c2:	2301      	movs	r3, #1
 80025c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ce:	f107 0314 	add.w	r3, r7, #20
 80025d2:	4619      	mov	r1, r3
 80025d4:	4804      	ldr	r0, [pc, #16]	; (80025e8 <MX_GPIO_Init+0xd4>)
 80025d6:	f7fe fb61 	bl	8000c9c <HAL_GPIO_Init>

}
 80025da:	bf00      	nop
 80025dc:	3728      	adds	r7, #40	; 0x28
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	10210000 	.word	0x10210000
 80025f0:	40020800 	.word	0x40020800

080025f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
	...

08002604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	4a10      	ldr	r2, [pc, #64]	; (8002650 <HAL_MspInit+0x4c>)
 8002610:	4b0f      	ldr	r3, [pc, #60]	; (8002650 <HAL_MspInit+0x4c>)
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002618:	6453      	str	r3, [r2, #68]	; 0x44
 800261a:	4b0d      	ldr	r3, [pc, #52]	; (8002650 <HAL_MspInit+0x4c>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800261e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002622:	607b      	str	r3, [r7, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	4a09      	ldr	r2, [pc, #36]	; (8002650 <HAL_MspInit+0x4c>)
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_MspInit+0x4c>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
 8002636:	4b06      	ldr	r3, [pc, #24]	; (8002650 <HAL_MspInit+0x4c>)
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002642:	2007      	movs	r0, #7
 8002644:	f7fe faf6 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002648:	bf00      	nop
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800

08002654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002654:	b480      	push	{r7}
 8002656:	b085      	sub	sp, #20
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]

  if(hadc->Instance==ADC1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_ADC_MspInit+0x3c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d10d      	bne.n	8002682 <HAL_ADC_MspInit+0x2e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <HAL_ADC_MspInit+0x40>)
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_ADC_MspInit+0x40>)
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6453      	str	r3, [r2, #68]	; 0x44
 8002676:	4b07      	ldr	r3, [pc, #28]	; (8002694 <HAL_ADC_MspInit+0x40>)
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002682:	bf00      	nop
 8002684:	3714      	adds	r7, #20
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	40012000 	.word	0x40012000
 8002694:	40023800 	.word	0x40023800

08002698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0314 	add.w	r3, r7, #20
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
 80026ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_I2C_MspInit+0x84>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d12b      	bne.n	8002712 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	4a18      	ldr	r2, [pc, #96]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026c0:	4b17      	ldr	r3, [pc, #92]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	f043 0302 	orr.w	r3, r3, #2
 80026c8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ca:	4b15      	ldr	r3, [pc, #84]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026d6:	23c0      	movs	r3, #192	; 0xc0
 80026d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026da:	2312      	movs	r3, #18
 80026dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026de:	2301      	movs	r3, #1
 80026e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026e6:	2304      	movs	r3, #4
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f107 0314 	add.w	r3, r7, #20
 80026ee:	4619      	mov	r1, r3
 80026f0:	480c      	ldr	r0, [pc, #48]	; (8002724 <HAL_I2C_MspInit+0x8c>)
 80026f2:	f7fe fad3 	bl	8000c9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4a09      	ldr	r2, [pc, #36]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_I2C_MspInit+0x88>)
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <HAL_I2C_MspInit+0x88>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002712:	bf00      	nop
 8002714:	3728      	adds	r7, #40	; 0x28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40005400 	.word	0x40005400
 8002720:	40023800 	.word	0x40023800
 8002724:	40020400 	.word	0x40020400

08002728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08a      	sub	sp, #40	; 0x28
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002730:	f107 0314 	add.w	r3, r7, #20
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
 800273c:	60da      	str	r2, [r3, #12]
 800273e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a19      	ldr	r2, [pc, #100]	; (80027ac <HAL_UART_MspInit+0x84>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d12b      	bne.n	80027a2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_UART_MspInit+0x88>)
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_UART_MspInit+0x88>)
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002758:	6413      	str	r3, [r2, #64]	; 0x40
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <HAL_UART_MspInit+0x88>)
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	4a11      	ldr	r2, [pc, #68]	; (80027b0 <HAL_UART_MspInit+0x88>)
 800276c:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_UART_MspInit+0x88>)
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_UART_MspInit+0x88>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002782:	230c      	movs	r3, #12
 8002784:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800278a:	2301      	movs	r3, #1
 800278c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800278e:	2303      	movs	r3, #3
 8002790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002792:	2307      	movs	r3, #7
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002796:	f107 0314 	add.w	r3, r7, #20
 800279a:	4619      	mov	r1, r3
 800279c:	4805      	ldr	r0, [pc, #20]	; (80027b4 <HAL_UART_MspInit+0x8c>)
 800279e:	f7fe fa7d 	bl	8000c9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027a2:	bf00      	nop
 80027a4:	3728      	adds	r7, #40	; 0x28
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40004400 	.word	0x40004400
 80027b0:	40023800 	.word	0x40023800
 80027b4:	40020000 	.word	0x40020000

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <MemManage_Handler+0x4>

080027d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <UsageFault_Handler+0x4>

080027de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800280c:	f7fd fedc 	bl	80005c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	bd80      	pop	{r7, pc}

08002814 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <SystemInit+0x60>)
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <SystemInit+0x60>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <SystemInit+0x64>)
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <SystemInit+0x64>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <SystemInit+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <SystemInit+0x64>)
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <SystemInit+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <SystemInit+0x64>)
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <SystemInit+0x68>)
 800284e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002850:	4a09      	ldr	r2, [pc, #36]	; (8002878 <SystemInit+0x64>)
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <SystemInit+0x64>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <SystemInit+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002862:	4b04      	ldr	r3, [pc, #16]	; (8002874 <SystemInit+0x60>)
 8002864:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002868:	609a      	str	r2, [r3, #8]
#endif
}
 800286a:	bf00      	nop
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	40023800 	.word	0x40023800
 800287c:	24003010 	.word	0x24003010

08002880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002884:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002886:	e003      	b.n	8002890 <LoopCopyDataInit>

08002888 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002888:	4b0c      	ldr	r3, [pc, #48]	; (80028bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800288a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800288c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800288e:	3104      	adds	r1, #4

08002890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002890:	480b      	ldr	r0, [pc, #44]	; (80028c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002892:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002894:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002896:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002898:	d3f6      	bcc.n	8002888 <CopyDataInit>
  ldr  r2, =_sbss
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800289c:	e002      	b.n	80028a4 <LoopFillZerobss>

0800289e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800289e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80028a0:	f842 3b04 	str.w	r3, [r2], #4

080028a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80028a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80028a8:	d3f9      	bcc.n	800289e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028aa:	f7ff ffb3 	bl	8002814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ae:	f000 f811 	bl	80028d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028b2:	f7ff fcf1 	bl	8002298 <main>
  bx  lr    
 80028b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80028b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80028bc:	08002974 	.word	0x08002974
  ldr  r0, =_sdata
 80028c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80028c4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80028c8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80028cc:	20000108 	.word	0x20000108

080028d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028d0:	e7fe      	b.n	80028d0 <ADC_IRQHandler>
	...

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4e0d      	ldr	r6, [pc, #52]	; (800290c <__libc_init_array+0x38>)
 80028d8:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <__libc_init_array+0x3c>)
 80028da:	1ba4      	subs	r4, r4, r6
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	2500      	movs	r5, #0
 80028e0:	42a5      	cmp	r5, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	4e0b      	ldr	r6, [pc, #44]	; (8002914 <__libc_init_array+0x40>)
 80028e6:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <__libc_init_array+0x44>)
 80028e8:	f000 f820 	bl	800292c <_init>
 80028ec:	1ba4      	subs	r4, r4, r6
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	2500      	movs	r5, #0
 80028f2:	42a5      	cmp	r5, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fc:	4798      	blx	r3
 80028fe:	3501      	adds	r5, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002906:	4798      	blx	r3
 8002908:	3501      	adds	r5, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	0800296c 	.word	0x0800296c
 8002910:	0800296c 	.word	0x0800296c
 8002914:	0800296c 	.word	0x0800296c
 8002918:	08002970 	.word	0x08002970

0800291c <memset>:
 800291c:	4402      	add	r2, r0
 800291e:	4603      	mov	r3, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <memset+0xa>
 8002924:	4770      	bx	lr
 8002926:	f803 1b01 	strb.w	r1, [r3], #1
 800292a:	e7f9      	b.n	8002920 <memset+0x4>

0800292c <_init>:
 800292c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800292e:	bf00      	nop
 8002930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002932:	bc08      	pop	{r3}
 8002934:	469e      	mov	lr, r3
 8002936:	4770      	bx	lr

08002938 <_fini>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	bf00      	nop
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr
