
lab_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001790  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001954  08001954  00011954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001974  08001974  00011974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800197c  0800197c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001980  08001980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000020  2000000c  08001990  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000002c  08001990  0002002c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008fd1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000149f  00000000  00000000  0002900d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000458  00000000  00000000  0002a4b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000003c0  00000000  00000000  0002a908  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000025f5  00000000  00000000  0002acc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001cb5  00000000  00000000  0002d2bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002ef72  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000fb4  00000000  00000000  0002eff0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000014d  00000000  00000000  0002ffa4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800193c 	.word	0x0800193c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800193c 	.word	0x0800193c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b97a 	b.w	8000510 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	468c      	mov	ip, r1
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	9e08      	ldr	r6, [sp, #32]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d151      	bne.n	80002e8 <__udivmoddi4+0xb4>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d96d      	bls.n	8000326 <__udivmoddi4+0xf2>
 800024a:	fab2 fe82 	clz	lr, r2
 800024e:	f1be 0f00 	cmp.w	lr, #0
 8000252:	d00b      	beq.n	800026c <__udivmoddi4+0x38>
 8000254:	f1ce 0c20 	rsb	ip, lr, #32
 8000258:	fa01 f50e 	lsl.w	r5, r1, lr
 800025c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000260:	fa02 f70e 	lsl.w	r7, r2, lr
 8000264:	ea4c 0c05 	orr.w	ip, ip, r5
 8000268:	fa00 f40e 	lsl.w	r4, r0, lr
 800026c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000270:	0c25      	lsrs	r5, r4, #16
 8000272:	fbbc f8fa 	udiv	r8, ip, sl
 8000276:	fa1f f987 	uxth.w	r9, r7
 800027a:	fb0a cc18 	mls	ip, sl, r8, ip
 800027e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000282:	fb08 f309 	mul.w	r3, r8, r9
 8000286:	42ab      	cmp	r3, r5
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x6c>
 800028a:	19ed      	adds	r5, r5, r7
 800028c:	f108 32ff 	add.w	r2, r8, #4294967295
 8000290:	f080 8123 	bcs.w	80004da <__udivmoddi4+0x2a6>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f240 8120 	bls.w	80004da <__udivmoddi4+0x2a6>
 800029a:	f1a8 0802 	sub.w	r8, r8, #2
 800029e:	443d      	add	r5, r7
 80002a0:	1aed      	subs	r5, r5, r3
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb5 f0fa 	udiv	r0, r5, sl
 80002a8:	fb0a 5510 	mls	r5, sl, r0, r5
 80002ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002b0:	fb00 f909 	mul.w	r9, r0, r9
 80002b4:	45a1      	cmp	r9, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x98>
 80002b8:	19e4      	adds	r4, r4, r7
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 810a 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80002c2:	45a1      	cmp	r9, r4
 80002c4:	f240 8107 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	eba4 0409 	sub.w	r4, r4, r9
 80002d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002d4:	2100      	movs	r1, #0
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d061      	beq.n	800039e <__udivmoddi4+0x16a>
 80002da:	fa24 f40e 	lsr.w	r4, r4, lr
 80002de:	2300      	movs	r3, #0
 80002e0:	6034      	str	r4, [r6, #0]
 80002e2:	6073      	str	r3, [r6, #4]
 80002e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d907      	bls.n	80002fc <__udivmoddi4+0xc8>
 80002ec:	2e00      	cmp	r6, #0
 80002ee:	d054      	beq.n	800039a <__udivmoddi4+0x166>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e886 0021 	stmia.w	r6, {r0, r5}
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	f040 808e 	bne.w	8000422 <__udivmoddi4+0x1ee>
 8000306:	42ab      	cmp	r3, r5
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xdc>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 80fa 	bhi.w	8000504 <__udivmoddi4+0x2d0>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb65 0503 	sbc.w	r5, r5, r3
 8000316:	2001      	movs	r0, #1
 8000318:	46ac      	mov	ip, r5
 800031a:	2e00      	cmp	r6, #0
 800031c:	d03f      	beq.n	800039e <__udivmoddi4+0x16a>
 800031e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	b912      	cbnz	r2, 800032e <__udivmoddi4+0xfa>
 8000328:	2701      	movs	r7, #1
 800032a:	fbb7 f7f2 	udiv	r7, r7, r2
 800032e:	fab7 fe87 	clz	lr, r7
 8000332:	f1be 0f00 	cmp.w	lr, #0
 8000336:	d134      	bne.n	80003a2 <__udivmoddi4+0x16e>
 8000338:	1beb      	subs	r3, r5, r7
 800033a:	0c3a      	lsrs	r2, r7, #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb3 f8f2 	udiv	r8, r3, r2
 8000346:	0c25      	lsrs	r5, r4, #16
 8000348:	fb02 3318 	mls	r3, r2, r8, r3
 800034c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000350:	fb0c f308 	mul.w	r3, ip, r8
 8000354:	42ab      	cmp	r3, r5
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x134>
 8000358:	19ed      	adds	r5, r5, r7
 800035a:	f108 30ff 	add.w	r0, r8, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x132>
 8000360:	42ab      	cmp	r3, r5
 8000362:	f200 80d1 	bhi.w	8000508 <__udivmoddi4+0x2d4>
 8000366:	4680      	mov	r8, r0
 8000368:	1aed      	subs	r5, r5, r3
 800036a:	b2a3      	uxth	r3, r4
 800036c:	fbb5 f0f2 	udiv	r0, r5, r2
 8000370:	fb02 5510 	mls	r5, r2, r0, r5
 8000374:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000378:	fb0c fc00 	mul.w	ip, ip, r0
 800037c:	45a4      	cmp	ip, r4
 800037e:	d907      	bls.n	8000390 <__udivmoddi4+0x15c>
 8000380:	19e4      	adds	r4, r4, r7
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x15a>
 8000388:	45a4      	cmp	ip, r4
 800038a:	f200 80b8 	bhi.w	80004fe <__udivmoddi4+0x2ca>
 800038e:	4618      	mov	r0, r3
 8000390:	eba4 040c 	sub.w	r4, r4, ip
 8000394:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000398:	e79d      	b.n	80002d6 <__udivmoddi4+0xa2>
 800039a:	4631      	mov	r1, r6
 800039c:	4630      	mov	r0, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	f1ce 0420 	rsb	r4, lr, #32
 80003a6:	fa05 f30e 	lsl.w	r3, r5, lr
 80003aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ae:	fa20 f804 	lsr.w	r8, r0, r4
 80003b2:	0c3a      	lsrs	r2, r7, #16
 80003b4:	fa25 f404 	lsr.w	r4, r5, r4
 80003b8:	ea48 0803 	orr.w	r8, r8, r3
 80003bc:	fbb4 f1f2 	udiv	r1, r4, r2
 80003c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003c4:	fb02 4411 	mls	r4, r2, r1, r4
 80003c8:	fa1f fc87 	uxth.w	ip, r7
 80003cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003d0:	fb01 f30c 	mul.w	r3, r1, ip
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	fa00 f40e 	lsl.w	r4, r0, lr
 80003da:	d909      	bls.n	80003f0 <__udivmoddi4+0x1bc>
 80003dc:	19ed      	adds	r5, r5, r7
 80003de:	f101 30ff 	add.w	r0, r1, #4294967295
 80003e2:	f080 808a 	bcs.w	80004fa <__udivmoddi4+0x2c6>
 80003e6:	42ab      	cmp	r3, r5
 80003e8:	f240 8087 	bls.w	80004fa <__udivmoddi4+0x2c6>
 80003ec:	3902      	subs	r1, #2
 80003ee:	443d      	add	r5, r7
 80003f0:	1aeb      	subs	r3, r5, r3
 80003f2:	fa1f f588 	uxth.w	r5, r8
 80003f6:	fbb3 f0f2 	udiv	r0, r3, r2
 80003fa:	fb02 3310 	mls	r3, r2, r0, r3
 80003fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000402:	fb00 f30c 	mul.w	r3, r0, ip
 8000406:	42ab      	cmp	r3, r5
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1e6>
 800040a:	19ed      	adds	r5, r5, r7
 800040c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000410:	d26f      	bcs.n	80004f2 <__udivmoddi4+0x2be>
 8000412:	42ab      	cmp	r3, r5
 8000414:	d96d      	bls.n	80004f2 <__udivmoddi4+0x2be>
 8000416:	3802      	subs	r0, #2
 8000418:	443d      	add	r5, r7
 800041a:	1aeb      	subs	r3, r5, r3
 800041c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000420:	e78f      	b.n	8000342 <__udivmoddi4+0x10e>
 8000422:	f1c1 0720 	rsb	r7, r1, #32
 8000426:	fa22 f807 	lsr.w	r8, r2, r7
 800042a:	408b      	lsls	r3, r1
 800042c:	fa05 f401 	lsl.w	r4, r5, r1
 8000430:	ea48 0303 	orr.w	r3, r8, r3
 8000434:	fa20 fe07 	lsr.w	lr, r0, r7
 8000438:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800043c:	40fd      	lsrs	r5, r7
 800043e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000442:	fbb5 f9fc 	udiv	r9, r5, ip
 8000446:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800044a:	fb0c 5519 	mls	r5, ip, r9, r5
 800044e:	fa1f f883 	uxth.w	r8, r3
 8000452:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000456:	fb09 f408 	mul.w	r4, r9, r8
 800045a:	42ac      	cmp	r4, r5
 800045c:	fa02 f201 	lsl.w	r2, r2, r1
 8000460:	fa00 fa01 	lsl.w	sl, r0, r1
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x244>
 8000466:	18ed      	adds	r5, r5, r3
 8000468:	f109 30ff 	add.w	r0, r9, #4294967295
 800046c:	d243      	bcs.n	80004f6 <__udivmoddi4+0x2c2>
 800046e:	42ac      	cmp	r4, r5
 8000470:	d941      	bls.n	80004f6 <__udivmoddi4+0x2c2>
 8000472:	f1a9 0902 	sub.w	r9, r9, #2
 8000476:	441d      	add	r5, r3
 8000478:	1b2d      	subs	r5, r5, r4
 800047a:	fa1f fe8e 	uxth.w	lr, lr
 800047e:	fbb5 f0fc 	udiv	r0, r5, ip
 8000482:	fb0c 5510 	mls	r5, ip, r0, r5
 8000486:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800048a:	fb00 f808 	mul.w	r8, r0, r8
 800048e:	45a0      	cmp	r8, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x26e>
 8000492:	18e4      	adds	r4, r4, r3
 8000494:	f100 35ff 	add.w	r5, r0, #4294967295
 8000498:	d229      	bcs.n	80004ee <__udivmoddi4+0x2ba>
 800049a:	45a0      	cmp	r8, r4
 800049c:	d927      	bls.n	80004ee <__udivmoddi4+0x2ba>
 800049e:	3802      	subs	r0, #2
 80004a0:	441c      	add	r4, r3
 80004a2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004a6:	eba4 0408 	sub.w	r4, r4, r8
 80004aa:	fba0 8902 	umull	r8, r9, r0, r2
 80004ae:	454c      	cmp	r4, r9
 80004b0:	46c6      	mov	lr, r8
 80004b2:	464d      	mov	r5, r9
 80004b4:	d315      	bcc.n	80004e2 <__udivmoddi4+0x2ae>
 80004b6:	d012      	beq.n	80004de <__udivmoddi4+0x2aa>
 80004b8:	b156      	cbz	r6, 80004d0 <__udivmoddi4+0x29c>
 80004ba:	ebba 030e 	subs.w	r3, sl, lr
 80004be:	eb64 0405 	sbc.w	r4, r4, r5
 80004c2:	fa04 f707 	lsl.w	r7, r4, r7
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431f      	orrs	r7, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	6037      	str	r7, [r6, #0]
 80004ce:	6074      	str	r4, [r6, #4]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d6:	4618      	mov	r0, r3
 80004d8:	e6f8      	b.n	80002cc <__udivmoddi4+0x98>
 80004da:	4690      	mov	r8, r2
 80004dc:	e6e0      	b.n	80002a0 <__udivmoddi4+0x6c>
 80004de:	45c2      	cmp	sl, r8
 80004e0:	d2ea      	bcs.n	80004b8 <__udivmoddi4+0x284>
 80004e2:	ebb8 0e02 	subs.w	lr, r8, r2
 80004e6:	eb69 0503 	sbc.w	r5, r9, r3
 80004ea:	3801      	subs	r0, #1
 80004ec:	e7e4      	b.n	80004b8 <__udivmoddi4+0x284>
 80004ee:	4628      	mov	r0, r5
 80004f0:	e7d7      	b.n	80004a2 <__udivmoddi4+0x26e>
 80004f2:	4640      	mov	r0, r8
 80004f4:	e791      	b.n	800041a <__udivmoddi4+0x1e6>
 80004f6:	4681      	mov	r9, r0
 80004f8:	e7be      	b.n	8000478 <__udivmoddi4+0x244>
 80004fa:	4601      	mov	r1, r0
 80004fc:	e778      	b.n	80003f0 <__udivmoddi4+0x1bc>
 80004fe:	3802      	subs	r0, #2
 8000500:	443c      	add	r4, r7
 8000502:	e745      	b.n	8000390 <__udivmoddi4+0x15c>
 8000504:	4608      	mov	r0, r1
 8000506:	e708      	b.n	800031a <__udivmoddi4+0xe6>
 8000508:	f1a8 0802 	sub.w	r8, r8, #2
 800050c:	443d      	add	r5, r7
 800050e:	e72b      	b.n	8000368 <__udivmoddi4+0x134>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <HAL_Init+0x40>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000522:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000524:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000526:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <HAL_Init+0x40>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800052e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000530:	4a08      	ldr	r2, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000532:	4b08      	ldr	r3, [pc, #32]	; (8000554 <HAL_Init+0x40>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f92d 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f808 	bl	8000558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f001 f8f2 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40023c00 	.word	0x40023c00

08000558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x54>)
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <HAL_InitTick+0x58>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4619      	mov	r1, r3
 800056a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000572:	fbb2 f3f3 	udiv	r3, r2, r3
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f937 	bl	80007ea <HAL_SYSTICK_Config>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000582:	2301      	movs	r3, #1
 8000584:	e00e      	b.n	80005a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	2b0f      	cmp	r3, #15
 800058a:	d80a      	bhi.n	80005a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800058c:	2200      	movs	r2, #0
 800058e:	6879      	ldr	r1, [r7, #4]
 8000590:	f04f 30ff 	mov.w	r0, #4294967295
 8000594:	f000 f90d 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000598:	4a06      	ldr	r2, [pc, #24]	; (80005b4 <HAL_InitTick+0x5c>)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059e:	2300      	movs	r3, #0
 80005a0:	e000      	b.n	80005a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005a2:	2301      	movs	r3, #1
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000008 	.word	0x20000008
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000000 	.word	0x20000000

080005b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x20>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	4b06      	ldr	r3, [pc, #24]	; (80005dc <HAL_IncTick+0x24>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	4a04      	ldr	r2, [pc, #16]	; (80005dc <HAL_IncTick+0x24>)
 80005ca:	6013      	str	r3, [r2, #0]
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000004 	.word	0x20000004
 80005dc:	20000028 	.word	0x20000028

080005e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <HAL_GetTick+0x14>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	20000028 	.word	0x20000028

080005f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff ffee 	bl	80005e0 <HAL_GetTick>
 8000604:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000610:	d005      	beq.n	800061e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000612:	4b09      	ldr	r3, [pc, #36]	; (8000638 <HAL_Delay+0x40>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4413      	add	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800061e:	bf00      	nop
 8000620:	f7ff ffde 	bl	80005e0 <HAL_GetTick>
 8000624:	4602      	mov	r2, r0
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1ad2      	subs	r2, r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	429a      	cmp	r2, r3
 800062e:	d3f7      	bcc.n	8000620 <HAL_Delay+0x28>
  {
  }
}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000004 	.word	0x20000004

0800063c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800063c:	b480      	push	{r7}
 800063e:	b085      	sub	sp, #20
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f003 0307 	and.w	r3, r3, #7
 800064a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800064c:	4b0c      	ldr	r3, [pc, #48]	; (8000680 <NVIC_SetPriorityGrouping+0x44>)
 800064e:	68db      	ldr	r3, [r3, #12]
 8000650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000652:	68ba      	ldr	r2, [r7, #8]
 8000654:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000658:	4013      	ands	r3, r2
 800065a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000664:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000668:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800066e:	4a04      	ldr	r2, [pc, #16]	; (8000680 <NVIC_SetPriorityGrouping+0x44>)
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000688:	4b04      	ldr	r3, [pc, #16]	; (800069c <NVIC_GetPriorityGrouping+0x18>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	0a1b      	lsrs	r3, r3, #8
 800068e:	f003 0307 	and.w	r3, r3, #7
}
 8000692:	4618      	mov	r0, r3
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00

080006a0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da0b      	bge.n	80006cc <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <NVIC_SetPriority+0x4c>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	3b04      	subs	r3, #4
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ca:	e009      	b.n	80006e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	4908      	ldr	r1, [pc, #32]	; (80006f0 <NVIC_SetPriority+0x50>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	2201      	movs	r2, #1
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	401a      	ands	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	2101      	movs	r1, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	1e59      	subs	r1, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff49 	bl	800063c <NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff5e 	bl	8000684 <NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff ffb0 	bl	8000758 <SysTick_Config>
 80007f8:	4603      	mov	r3, r0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
	...

08000804 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b04      	cmp	r3, #4
 8000810:	d106      	bne.n	8000820 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000812:	4a09      	ldr	r2, [pc, #36]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000814:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800081e:	e005      	b.n	800082c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000820:	4a05      	ldr	r2, [pc, #20]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f023 0304 	bic.w	r3, r3, #4
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	e000e010 	.word	0xe000e010

0800083c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000840:	f000 f802 	bl	8000848 <HAL_SYSTICK_Callback>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}

08000848 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b089      	sub	sp, #36	; 0x24
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800086a:	2300      	movs	r3, #0
 800086c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
 8000872:	e165      	b.n	8000b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000874:	2201      	movs	r2, #1
 8000876:	69fb      	ldr	r3, [r7, #28]
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	4013      	ands	r3, r2
 8000886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000888:	693a      	ldr	r2, [r7, #16]
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	429a      	cmp	r2, r3
 800088e:	f040 8154 	bne.w	8000b3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b02      	cmp	r3, #2
 8000898:	d003      	beq.n	80008a2 <HAL_GPIO_Init+0x4a>
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	685b      	ldr	r3, [r3, #4]
 800089e:	2b12      	cmp	r3, #18
 80008a0:	d123      	bne.n	80008ea <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	08da      	lsrs	r2, r3, #3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	3208      	adds	r2, #8
 80008aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008b0:	69fb      	ldr	r3, [r7, #28]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	220f      	movs	r2, #15
 80008ba:	fa02 f303 	lsl.w	r3, r2, r3
 80008be:	43db      	mvns	r3, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4013      	ands	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	009b      	lsls	r3, r3, #2
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	4313      	orrs	r3, r2
 80008da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	69b9      	ldr	r1, [r7, #24]
 80008e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	2203      	movs	r2, #3
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43db      	mvns	r3, r3
 80008fc:	69ba      	ldr	r2, [r7, #24]
 80008fe:	4013      	ands	r3, r2
 8000900:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f003 0203 	and.w	r2, r3, #3
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	2b01      	cmp	r3, #1
 8000924:	d00b      	beq.n	800093e <HAL_GPIO_Init+0xe6>
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d007      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000932:	2b11      	cmp	r3, #17
 8000934:	d003      	beq.n	800093e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	2b12      	cmp	r3, #18
 800093c:	d130      	bne.n	80009a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	2203      	movs	r2, #3
 800094a:	fa02 f303 	lsl.w	r3, r2, r3
 800094e:	43db      	mvns	r3, r3
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	4013      	ands	r3, r2
 8000954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	68da      	ldr	r2, [r3, #12]
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	fa02 f303 	lsl.w	r3, r2, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4313      	orrs	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	69ba      	ldr	r2, [r7, #24]
 800096c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000974:	2201      	movs	r2, #1
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	091b      	lsrs	r3, r3, #4
 800098a:	f003 0201 	and.w	r2, r3, #1
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	69ba      	ldr	r2, [r7, #24]
 8000996:	4313      	orrs	r3, r2
 8000998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	2203      	movs	r2, #3
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	43db      	mvns	r3, r3
 80009b2:	69ba      	ldr	r2, [r7, #24]
 80009b4:	4013      	ands	r3, r2
 80009b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689a      	ldr	r2, [r3, #8]
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	69ba      	ldr	r2, [r7, #24]
 80009c6:	4313      	orrs	r3, r2
 80009c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	69ba      	ldr	r2, [r7, #24]
 80009ce:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d8:	2b00      	cmp	r3, #0
 80009da:	f000 80ae 	beq.w	8000b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4a5c      	ldr	r2, [pc, #368]	; (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009e4:	4b5b      	ldr	r3, [pc, #364]	; (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	; 0x44
 80009ee:	4b59      	ldr	r3, [pc, #356]	; (8000b54 <HAL_GPIO_Init+0x2fc>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009fa:	4a57      	ldr	r2, [pc, #348]	; (8000b58 <HAL_GPIO_Init+0x300>)
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	089b      	lsrs	r3, r3, #2
 8000a00:	3302      	adds	r3, #2
 8000a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	220f      	movs	r2, #15
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	43db      	mvns	r3, r3
 8000a18:	69ba      	ldr	r2, [r7, #24]
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a4e      	ldr	r2, [pc, #312]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d025      	beq.n	8000a72 <HAL_GPIO_Init+0x21a>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4d      	ldr	r2, [pc, #308]	; (8000b60 <HAL_GPIO_Init+0x308>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d01f      	beq.n	8000a6e <HAL_GPIO_Init+0x216>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <HAL_GPIO_Init+0x30c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d019      	beq.n	8000a6a <HAL_GPIO_Init+0x212>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <HAL_GPIO_Init+0x310>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d013      	beq.n	8000a66 <HAL_GPIO_Init+0x20e>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <HAL_GPIO_Init+0x314>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d00d      	beq.n	8000a62 <HAL_GPIO_Init+0x20a>
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_GPIO_Init+0x318>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d007      	beq.n	8000a5e <HAL_GPIO_Init+0x206>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a48      	ldr	r2, [pc, #288]	; (8000b74 <HAL_GPIO_Init+0x31c>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d101      	bne.n	8000a5a <HAL_GPIO_Init+0x202>
 8000a56:	2306      	movs	r3, #6
 8000a58:	e00c      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a5a:	2307      	movs	r3, #7
 8000a5c:	e00a      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a5e:	2305      	movs	r3, #5
 8000a60:	e008      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a62:	2304      	movs	r3, #4
 8000a64:	e006      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a66:	2303      	movs	r3, #3
 8000a68:	e004      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	e002      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e000      	b.n	8000a74 <HAL_GPIO_Init+0x21c>
 8000a72:	2300      	movs	r3, #0
 8000a74:	69fa      	ldr	r2, [r7, #28]
 8000a76:	f002 0203 	and.w	r2, r2, #3
 8000a7a:	0092      	lsls	r2, r2, #2
 8000a7c:	4093      	lsls	r3, r2
 8000a7e:	69ba      	ldr	r2, [r7, #24]
 8000a80:	4313      	orrs	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a84:	4934      	ldr	r1, [pc, #208]	; (8000b58 <HAL_GPIO_Init+0x300>)
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	089b      	lsrs	r3, r3, #2
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a92:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ab6:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000abc:	4b2e      	ldr	r3, [pc, #184]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ae0:	4a25      	ldr	r2, [pc, #148]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ae6:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	69ba      	ldr	r2, [r7, #24]
 8000af2:	4013      	ands	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000b02:	69ba      	ldr	r2, [r7, #24]
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b0a:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000b0c:	69bb      	ldr	r3, [r7, #24]
 8000b0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	69ba      	ldr	r2, [r7, #24]
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b34:	4a10      	ldr	r2, [pc, #64]	; (8000b78 <HAL_GPIO_Init+0x320>)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	2b0f      	cmp	r3, #15
 8000b44:	f67f ae96 	bls.w	8000874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b48:	bf00      	nop
 8000b4a:	3724      	adds	r7, #36	; 0x24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40013800 	.word	0x40013800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40020800 	.word	0x40020800
 8000b68:	40020c00 	.word	0x40020c00
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40021400 	.word	0x40021400
 8000b74:	40021800 	.word	0x40021800
 8000b78:	40013c00 	.word	0x40013c00

08000b7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	460b      	mov	r3, r1
 8000b86:	807b      	strh	r3, [r7, #2]
 8000b88:	4613      	mov	r3, r2
 8000b8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b8c:	787b      	ldrb	r3, [r7, #1]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d003      	beq.n	8000b9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b92:	887a      	ldrh	r2, [r7, #2]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b98:	e003      	b.n	8000ba2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b9a:	887b      	ldrh	r3, [r7, #2]
 8000b9c:	041a      	lsls	r2, r3, #16
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	619a      	str	r2, [r3, #24]
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b083      	sub	sp, #12
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	6078      	str	r0, [r7, #4]
 8000bb6:	460b      	mov	r3, r1
 8000bb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	695a      	ldr	r2, [r3, #20]
 8000bbe:	887b      	ldrh	r3, [r7, #2]
 8000bc0:	405a      	eors	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	615a      	str	r2, [r3, #20]
}
 8000bc6:	bf00      	nop
 8000bc8:	370c      	adds	r7, #12
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d101      	bne.n	8000be8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	e0ca      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000be8:	4b67      	ldr	r3, [pc, #412]	; (8000d88 <HAL_RCC_ClockConfig+0x1b4>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 020f 	and.w	r2, r3, #15
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d20c      	bcs.n	8000c10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bf6:	4b64      	ldr	r3, [pc, #400]	; (8000d88 <HAL_RCC_ClockConfig+0x1b4>)
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	b2d2      	uxtb	r2, r2
 8000bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bfe:	4b62      	ldr	r3, [pc, #392]	; (8000d88 <HAL_RCC_ClockConfig+0x1b4>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f003 020f 	and.w	r2, r3, #15
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d001      	beq.n	8000c10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e0b6      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d020      	beq.n	8000c5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0304 	and.w	r3, r3, #4
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d005      	beq.n	8000c34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c28:	4a58      	ldr	r2, [pc, #352]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c2a:	4b58      	ldr	r3, [pc, #352]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c2c:	689b      	ldr	r3, [r3, #8]
 8000c2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000c32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f003 0308 	and.w	r3, r3, #8
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c40:	4a52      	ldr	r2, [pc, #328]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c42:	4b52      	ldr	r3, [pc, #328]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000c4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c4c:	494f      	ldr	r1, [pc, #316]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c4e:	4b4f      	ldr	r3, [pc, #316]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689b      	ldr	r3, [r3, #8]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d044      	beq.n	8000cf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b01      	cmp	r3, #1
 8000c70:	d107      	bne.n	8000c82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	4b46      	ldr	r3, [pc, #280]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d119      	bne.n	8000cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e07d      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d003      	beq.n	8000c92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d107      	bne.n	8000ca2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c92:	4b3e      	ldr	r3, [pc, #248]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d109      	bne.n	8000cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e06d      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d101      	bne.n	8000cb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e065      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000cb2:	4936      	ldr	r1, [pc, #216]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000cb4:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	f023 0203 	bic.w	r2, r3, #3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000cc4:	f7ff fc8c 	bl	80005e0 <HAL_GetTick>
 8000cc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cca:	e00a      	b.n	8000ce2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ccc:	f7ff fc88 	bl	80005e0 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e04d      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000ce4:	689b      	ldr	r3, [r3, #8]
 8000ce6:	f003 020c 	and.w	r2, r3, #12
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d1eb      	bne.n	8000ccc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000cf4:	4b24      	ldr	r3, [pc, #144]	; (8000d88 <HAL_RCC_ClockConfig+0x1b4>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f003 020f 	and.w	r2, r3, #15
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d90c      	bls.n	8000d1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d02:	4b21      	ldr	r3, [pc, #132]	; (8000d88 <HAL_RCC_ClockConfig+0x1b4>)
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_RCC_ClockConfig+0x1b4>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 020f 	and.w	r2, r3, #15
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	d001      	beq.n	8000d1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e030      	b.n	8000d7e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f003 0304 	and.w	r3, r3, #4
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d008      	beq.n	8000d3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d28:	4918      	ldr	r1, [pc, #96]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000d2a:	4b18      	ldr	r3, [pc, #96]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	68db      	ldr	r3, [r3, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d009      	beq.n	8000d5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000d46:	4911      	ldr	r1, [pc, #68]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000d48:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	00db      	lsls	r3, r3, #3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d5a:	f000 f829 	bl	8000db0 <HAL_RCC_GetSysClockFreq>
 8000d5e:	4601      	mov	r1, r0
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <HAL_RCC_ClockConfig+0x1b8>)
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <HAL_RCC_ClockConfig+0x1bc>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d72:	4a08      	ldr	r2, [pc, #32]	; (8000d94 <HAL_RCC_ClockConfig+0x1c0>)
 8000d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d76:	2000      	movs	r0, #0
 8000d78:	f7ff fbee 	bl	8000558 <HAL_InitTick>

  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	08001964 	.word	0x08001964
 8000d94:	20000008 	.word	0x20000008

08000d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <HAL_RCC_GetHCLKFreq+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	20000008 	.word	0x20000008

08000db0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000db4:	b0a1      	sub	sp, #132	; 0x84
 8000db6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8000db8:	2300      	movs	r3, #0
 8000dba:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t pllvco = 0U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t pllp = 0U;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t pllr = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t sysclockfreq = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000dcc:	4ba0      	ldr	r3, [pc, #640]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	f003 030c 	and.w	r3, r3, #12
 8000dd4:	2b0c      	cmp	r3, #12
 8000dd6:	f200 8193 	bhi.w	8001100 <HAL_RCC_GetSysClockFreq+0x350>
 8000dda:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <HAL_RCC_GetSysClockFreq+0x30>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e15 	.word	0x08000e15
 8000de4:	08001101 	.word	0x08001101
 8000de8:	08001101 	.word	0x08001101
 8000dec:	08001101 	.word	0x08001101
 8000df0:	08000e1b 	.word	0x08000e1b
 8000df4:	08001101 	.word	0x08001101
 8000df8:	08001101 	.word	0x08001101
 8000dfc:	08001101 	.word	0x08001101
 8000e00:	08000e21 	.word	0x08000e21
 8000e04:	08001101 	.word	0x08001101
 8000e08:	08001101 	.word	0x08001101
 8000e0c:	08001101 	.word	0x08001101
 8000e10:	08000f9d 	.word	0x08000f9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e14:	4b8f      	ldr	r3, [pc, #572]	; (8001054 <HAL_RCC_GetSysClockFreq+0x2a4>)
 8000e16:	67bb      	str	r3, [r7, #120]	; 0x78
       break;
 8000e18:	e175      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8000e1a:	4b8f      	ldr	r3, [pc, #572]	; (8001058 <HAL_RCC_GetSysClockFreq+0x2a8>)
 8000e1c:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8000e1e:	e172      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e20:	4b8b      	ldr	r3, [pc, #556]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000e28:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e2a:	4b89      	ldr	r3, [pc, #548]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d056      	beq.n	8000ee4 <HAL_RCC_GetSysClockFreq+0x134>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e36:	4b86      	ldr	r3, [pc, #536]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	099b      	lsrs	r3, r3, #6
 8000e3c:	f04f 0400 	mov.w	r4, #0
 8000e40:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000e44:	f04f 0200 	mov.w	r2, #0
 8000e48:	ea01 0103 	and.w	r1, r1, r3
 8000e4c:	ea02 0204 	and.w	r2, r2, r4
 8000e50:	460b      	mov	r3, r1
 8000e52:	4614      	mov	r4, r2
 8000e54:	0160      	lsls	r0, r4, #5
 8000e56:	6678      	str	r0, [r7, #100]	; 0x64
 8000e58:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8000e5a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000e5e:	6678      	str	r0, [r7, #100]	; 0x64
 8000e60:	015b      	lsls	r3, r3, #5
 8000e62:	663b      	str	r3, [r7, #96]	; 0x60
 8000e64:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8000e68:	1a5b      	subs	r3, r3, r1
 8000e6a:	eb64 0402 	sbc.w	r4, r4, r2
 8000e6e:	01a0      	lsls	r0, r4, #6
 8000e70:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000e72:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8000e74:	ea40 6093 	orr.w	r0, r0, r3, lsr #26
 8000e78:	65f8      	str	r0, [r7, #92]	; 0x5c
 8000e7a:	0198      	lsls	r0, r3, #6
 8000e7c:	65b8      	str	r0, [r7, #88]	; 0x58
 8000e7e:	e9d7 5616 	ldrd	r5, r6, [r7, #88]	; 0x58
 8000e82:	1aed      	subs	r5, r5, r3
 8000e84:	eb66 0604 	sbc.w	r6, r6, r4
 8000e88:	4633      	mov	r3, r6
 8000e8a:	00db      	lsls	r3, r3, #3
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8000e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e90:	4628      	mov	r0, r5
 8000e92:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000e96:	657b      	str	r3, [r7, #84]	; 0x54
 8000e98:	462b      	mov	r3, r5
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8000e9e:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8000ea2:	461d      	mov	r5, r3
 8000ea4:	4626      	mov	r6, r4
 8000ea6:	186b      	adds	r3, r5, r1
 8000ea8:	eb46 0402 	adc.w	r4, r6, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	4621      	mov	r1, r4
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	025b      	lsls	r3, r3, #9
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000eb8:	4602      	mov	r2, r0
 8000eba:	ea43 53d2 	orr.w	r3, r3, r2, lsr #23
 8000ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	025b      	lsls	r3, r3, #9
 8000ec4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8000eca:	4618      	mov	r0, r3
 8000ecc:	4621      	mov	r1, r4
 8000ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000ed0:	f04f 0400 	mov.w	r4, #0
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	4623      	mov	r3, r4
 8000ed8:	f7ff f994 	bl	8000204 <__aeabi_uldivmod>
 8000edc:	4603      	mov	r3, r0
 8000ede:	460c      	mov	r4, r1
 8000ee0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000ee2:	e04d      	b.n	8000f80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ee4:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	099b      	lsrs	r3, r3, #6
 8000eea:	f04f 0400 	mov.w	r4, #0
 8000eee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	ea01 0103 	and.w	r1, r1, r3
 8000efa:	ea02 0204 	and.w	r2, r2, r4
 8000efe:	460b      	mov	r3, r1
 8000f00:	4614      	mov	r4, r2
 8000f02:	0160      	lsls	r0, r4, #5
 8000f04:	6478      	str	r0, [r7, #68]	; 0x44
 8000f06:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000f08:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000f0c:	6478      	str	r0, [r7, #68]	; 0x44
 8000f0e:	015b      	lsls	r3, r3, #5
 8000f10:	643b      	str	r3, [r7, #64]	; 0x40
 8000f12:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8000f16:	1a5b      	subs	r3, r3, r1
 8000f18:	eb64 0402 	sbc.w	r4, r4, r2
 8000f1c:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8000f20:	ea4b 6b93 	orr.w	fp, fp, r3, lsr #26
 8000f24:	ea4f 1a83 	mov.w	sl, r3, lsl #6
 8000f28:	ebba 0a03 	subs.w	sl, sl, r3
 8000f2c:	eb6b 0b04 	sbc.w	fp, fp, r4
 8000f30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8000f34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f3e:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8000f42:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f44:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 8000f48:	eb1a 0a01 	adds.w	sl, sl, r1
 8000f4c:	eb4b 0b02 	adc.w	fp, fp, r2
 8000f50:	ea4f 238b 	mov.w	r3, fp, lsl #10
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
 8000f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f58:	ea43 539a 	orr.w	r3, r3, sl, lsr #22
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f5e:	ea4f 238a 	mov.w	r3, sl, lsl #10
 8000f62:	633b      	str	r3, [r7, #48]	; 0x30
 8000f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8000f68:	4650      	mov	r0, sl
 8000f6a:	4659      	mov	r1, fp
 8000f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f6e:	f04f 0400 	mov.w	r4, #0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4623      	mov	r3, r4
 8000f76:	f7ff f945 	bl	8000204 <__aeabi_uldivmod>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460c      	mov	r4, r1
 8000f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	0c1b      	lsrs	r3, r3, #16
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	673b      	str	r3, [r7, #112]	; 0x70

      sysclockfreq = pllvco/pllp;
 8000f90:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f98:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8000f9a:	e0b4      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x356>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000fa4:	677b      	str	r3, [r7, #116]	; 0x74
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d054      	beq.n	800105c <HAL_RCC_GetSysClockFreq+0x2ac>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000fb2:	4b27      	ldr	r3, [pc, #156]	; (8001050 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	099b      	lsrs	r3, r3, #6
 8000fb8:	f04f 0400 	mov.w	r4, #0
 8000fbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	ea01 0103 	and.w	r1, r1, r3
 8000fc8:	ea02 0204 	and.w	r2, r2, r4
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4614      	mov	r4, r2
 8000fd0:	0160      	lsls	r0, r4, #5
 8000fd2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000fd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fd6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8000fda:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000fdc:	015b      	lsls	r3, r3, #5
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fe0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8000fea:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8000fee:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8000ff2:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8000ff6:	ebb8 0803 	subs.w	r8, r8, r3
 8000ffa:	eb69 0904 	sbc.w	r9, r9, r4
 8000ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
 8001004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001006:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
 800100c:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001016:	eb18 0801 	adds.w	r8, r8, r1
 800101a:	eb49 0902 	adc.w	r9, r9, r2
 800101e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001022:	61fb      	str	r3, [r7, #28]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 800102a:	61fb      	str	r3, [r7, #28]
 800102c:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001036:	4640      	mov	r0, r8
 8001038:	4649      	mov	r1, r9
 800103a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800103c:	f04f 0400 	mov.w	r4, #0
 8001040:	461a      	mov	r2, r3
 8001042:	4623      	mov	r3, r4
 8001044:	f7ff f8de 	bl	8000204 <__aeabi_uldivmod>
 8001048:	4603      	mov	r3, r0
 800104a:	460c      	mov	r4, r1
 800104c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800104e:	e04b      	b.n	80010e8 <HAL_RCC_GetSysClockFreq+0x338>
 8001050:	40023800 	.word	0x40023800
 8001054:	00f42400 	.word	0x00f42400
 8001058:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_RCC_GetSysClockFreq+0x364>)
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	099b      	lsrs	r3, r3, #6
 8001062:	f04f 0400 	mov.w	r4, #0
 8001066:	f240 11ff 	movw	r1, #511	; 0x1ff
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	ea01 0103 	and.w	r1, r1, r3
 8001072:	ea02 0204 	and.w	r2, r2, r4
 8001076:	460b      	mov	r3, r1
 8001078:	4614      	mov	r4, r2
 800107a:	0160      	lsls	r0, r4, #5
 800107c:	6178      	str	r0, [r7, #20]
 800107e:	6978      	ldr	r0, [r7, #20]
 8001080:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001084:	6178      	str	r0, [r7, #20]
 8001086:	015b      	lsls	r3, r3, #5
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800108e:	1a5b      	subs	r3, r3, r1
 8001090:	eb64 0402 	sbc.w	r4, r4, r2
 8001094:	01a6      	lsls	r6, r4, #6
 8001096:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 800109a:	019d      	lsls	r5, r3, #6
 800109c:	1aed      	subs	r5, r5, r3
 800109e:	eb66 0604 	sbc.w	r6, r6, r4
 80010a2:	00f3      	lsls	r3, r6, #3
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	00eb      	lsls	r3, r5, #3
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80010b6:	186d      	adds	r5, r5, r1
 80010b8:	eb46 0602 	adc.w	r6, r6, r2
 80010bc:	02b3      	lsls	r3, r6, #10
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	ea43 5395 	orr.w	r3, r3, r5, lsr #22
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	02ab      	lsls	r3, r5, #10
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	e897 0060 	ldmia.w	r7, {r5, r6}
 80010d0:	4628      	mov	r0, r5
 80010d2:	4631      	mov	r1, r6
 80010d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010d6:	f04f 0400 	mov.w	r4, #0
 80010da:	461a      	mov	r2, r3
 80010dc:	4623      	mov	r3, r4
 80010de:	f7ff f891 	bl	8000204 <__aeabi_uldivmod>
 80010e2:	4603      	mov	r3, r0
 80010e4:	460c      	mov	r4, r1
 80010e6:	67fb      	str	r3, [r7, #124]	; 0x7c
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80010e8:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <HAL_RCC_GetSysClockFreq+0x364>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	0f1b      	lsrs	r3, r3, #28
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	66fb      	str	r3, [r7, #108]	; 0x6c

      sysclockfreq = pllvco/pllr;
 80010f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80010f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80010f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fc:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 80010fe:	e002      	b.n	8001106 <HAL_RCC_GetSysClockFreq+0x356>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_RCC_GetSysClockFreq+0x368>)
 8001102:	67bb      	str	r3, [r7, #120]	; 0x78
      break;
 8001104:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8001108:	4618      	mov	r0, r3
 800110a:	3784      	adds	r7, #132	; 0x84
 800110c:	46bd      	mov	sp, r7
 800110e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	00f42400 	.word	0x00f42400

0800111c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001124:	2300      	movs	r3, #0
 8001126:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0301 	and.w	r3, r3, #1
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 8083 	beq.w	800123c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001136:	4b95      	ldr	r3, [pc, #596]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b04      	cmp	r3, #4
 8001140:	d019      	beq.n	8001176 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001142:	4b92      	ldr	r3, [pc, #584]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800114a:	2b08      	cmp	r3, #8
 800114c:	d106      	bne.n	800115c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800114e:	4b8f      	ldr	r3, [pc, #572]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001156:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800115a:	d00c      	beq.n	8001176 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115c:	4b8b      	ldr	r3, [pc, #556]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d112      	bne.n	800118e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001168:	4b88      	ldr	r3, [pc, #544]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001170:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001174:	d10b      	bne.n	800118e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001176:	4b85      	ldr	r3, [pc, #532]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d05b      	beq.n	800123a <HAL_RCC_OscConfig+0x11e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d157      	bne.n	800123a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e216      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001196:	d106      	bne.n	80011a6 <HAL_RCC_OscConfig+0x8a>
 8001198:	4a7c      	ldr	r2, [pc, #496]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800119a:	4b7c      	ldr	r3, [pc, #496]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	e01d      	b.n	80011e2 <HAL_RCC_OscConfig+0xc6>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ae:	d10c      	bne.n	80011ca <HAL_RCC_OscConfig+0xae>
 80011b0:	4a76      	ldr	r2, [pc, #472]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011b2:	4b76      	ldr	r3, [pc, #472]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4a73      	ldr	r2, [pc, #460]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011be:	4b73      	ldr	r3, [pc, #460]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	e00b      	b.n	80011e2 <HAL_RCC_OscConfig+0xc6>
 80011ca:	4a70      	ldr	r2, [pc, #448]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011cc:	4b6f      	ldr	r3, [pc, #444]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d4:	6013      	str	r3, [r2, #0]
 80011d6:	4a6d      	ldr	r2, [pc, #436]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011d8:	4b6c      	ldr	r3, [pc, #432]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d013      	beq.n	8001212 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ea:	f7ff f9f9 	bl	80005e0 <HAL_GetTick>
 80011ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f0:	e008      	b.n	8001204 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f2:	f7ff f9f5 	bl	80005e0 <HAL_GetTick>
 80011f6:	4602      	mov	r2, r0
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b64      	cmp	r3, #100	; 0x64
 80011fe:	d901      	bls.n	8001204 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001200:	2303      	movs	r3, #3
 8001202:	e1db      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001204:	4b61      	ldr	r3, [pc, #388]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0f0      	beq.n	80011f2 <HAL_RCC_OscConfig+0xd6>
 8001210:	e014      	b.n	800123c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001212:	f7ff f9e5 	bl	80005e0 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121a:	f7ff f9e1 	bl	80005e0 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e1c7      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122c:	4b57      	ldr	r3, [pc, #348]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0xfe>
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d06f      	beq.n	8001328 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001248:	4b50      	ldr	r3, [pc, #320]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b00      	cmp	r3, #0
 8001252:	d017      	beq.n	8001284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001254:	4b4d      	ldr	r3, [pc, #308]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800125c:	2b08      	cmp	r3, #8
 800125e:	d105      	bne.n	800126c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001260:	4b4a      	ldr	r3, [pc, #296]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d00b      	beq.n	8001284 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800126c:	4b47      	ldr	r3, [pc, #284]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001274:	2b0c      	cmp	r3, #12
 8001276:	d11c      	bne.n	80012b2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001278:	4b44      	ldr	r3, [pc, #272]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d116      	bne.n	80012b2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001284:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_OscConfig+0x270>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d005      	beq.n	800129c <HAL_RCC_OscConfig+0x180>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d001      	beq.n	800129c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e18f      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800129c:	493b      	ldr	r1, [pc, #236]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800129e:	4b3b      	ldr	r3, [pc, #236]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	4313      	orrs	r3, r2
 80012ae:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b0:	e03a      	b.n	8001328 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d020      	beq.n	80012fc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ba:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff f98e 	bl	80005e0 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff f98a 	bl	80005e0 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e170      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	4929      	ldr	r1, [pc, #164]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012e8:	4b28      	ldr	r3, [pc, #160]	; (800138c <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	600b      	str	r3, [r1, #0]
 80012fa:	e015      	b.n	8001328 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012fc:	4b24      	ldr	r3, [pc, #144]	; (8001390 <HAL_RCC_OscConfig+0x274>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001302:	f7ff f96d 	bl	80005e0 <HAL_GetTick>
 8001306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001308:	e008      	b.n	800131c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800130a:	f7ff f969 	bl	80005e0 <HAL_GetTick>
 800130e:	4602      	mov	r2, r0
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d901      	bls.n	800131c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e14f      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131c:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f0      	bne.n	800130a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d037      	beq.n	80013a4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	695b      	ldr	r3, [r3, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d016      	beq.n	800136a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <HAL_RCC_OscConfig+0x278>)
 800133e:	2201      	movs	r2, #1
 8001340:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001342:	f7ff f94d 	bl	80005e0 <HAL_GetTick>
 8001346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800134a:	f7ff f949 	bl	80005e0 <HAL_GetTick>
 800134e:	4602      	mov	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e12f      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135c:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_RCC_OscConfig+0x270>)
 800135e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001360:	f003 0302 	and.w	r3, r3, #2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0f0      	beq.n	800134a <HAL_RCC_OscConfig+0x22e>
 8001368:	e01c      	b.n	80013a4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_RCC_OscConfig+0x278>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff f936 	bl	80005e0 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001376:	e00f      	b.n	8001398 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff f932 	bl	80005e0 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d908      	bls.n	8001398 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e118      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	42470000 	.word	0x42470000
 8001394:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001398:	4b8a      	ldr	r3, [pc, #552]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800139a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139c:	f003 0302 	and.w	r3, r3, #2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1e9      	bne.n	8001378 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 8097 	beq.w	80014e0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b6:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10f      	bne.n	80013e2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4a7f      	ldr	r2, [pc, #508]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80013c8:	4b7e      	ldr	r3, [pc, #504]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b7c      	ldr	r3, [pc, #496]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e2:	4b79      	ldr	r3, [pc, #484]	; (80015c8 <HAL_RCC_OscConfig+0x4ac>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d118      	bne.n	8001420 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ee:	4a76      	ldr	r2, [pc, #472]	; (80015c8 <HAL_RCC_OscConfig+0x4ac>)
 80013f0:	4b75      	ldr	r3, [pc, #468]	; (80015c8 <HAL_RCC_OscConfig+0x4ac>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fa:	f7ff f8f1 	bl	80005e0 <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001402:	f7ff f8ed 	bl	80005e0 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e0d3      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001414:	4b6c      	ldr	r3, [pc, #432]	; (80015c8 <HAL_RCC_OscConfig+0x4ac>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_RCC_OscConfig+0x31a>
 8001428:	4a66      	ldr	r2, [pc, #408]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800142a:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6713      	str	r3, [r2, #112]	; 0x70
 8001434:	e01c      	b.n	8001470 <HAL_RCC_OscConfig+0x354>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	2b05      	cmp	r3, #5
 800143c:	d10c      	bne.n	8001458 <HAL_RCC_OscConfig+0x33c>
 800143e:	4a61      	ldr	r2, [pc, #388]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 8001440:	4b60      	ldr	r3, [pc, #384]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6713      	str	r3, [r2, #112]	; 0x70
 800144a:	4a5e      	ldr	r2, [pc, #376]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800144c:	4b5d      	ldr	r3, [pc, #372]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6713      	str	r3, [r2, #112]	; 0x70
 8001456:	e00b      	b.n	8001470 <HAL_RCC_OscConfig+0x354>
 8001458:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800145a:	4b5a      	ldr	r3, [pc, #360]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	f023 0301 	bic.w	r3, r3, #1
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 8001466:	4b57      	ldr	r3, [pc, #348]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	f023 0304 	bic.w	r3, r3, #4
 800146e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d015      	beq.n	80014a4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001478:	f7ff f8b2 	bl	80005e0 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800147e:	e00a      	b.n	8001496 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff f8ae 	bl	80005e0 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	f241 3288 	movw	r2, #5000	; 0x1388
 800148e:	4293      	cmp	r3, r2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e092      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001496:	4b4b      	ldr	r3, [pc, #300]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0ee      	beq.n	8001480 <HAL_RCC_OscConfig+0x364>
 80014a2:	e014      	b.n	80014ce <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014a4:	f7ff f89c 	bl	80005e0 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014aa:	e00a      	b.n	80014c2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ac:	f7ff f898 	bl	80005e0 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e07c      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1ee      	bne.n	80014ac <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014ce:	7dfb      	ldrb	r3, [r7, #23]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d105      	bne.n	80014e0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d4:	4a3b      	ldr	r2, [pc, #236]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80014d6:	4b3b      	ldr	r3, [pc, #236]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d068      	beq.n	80015ba <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014e8:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 030c 	and.w	r3, r3, #12
 80014f0:	2b08      	cmp	r3, #8
 80014f2:	d060      	beq.n	80015b6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d145      	bne.n	8001588 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_RCC_OscConfig+0x4b0>)
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001502:	f7ff f86d 	bl	80005e0 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff f869 	bl	80005e0 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e04f      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001528:	4926      	ldr	r1, [pc, #152]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	69da      	ldr	r2, [r3, #28]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a1b      	ldr	r3, [r3, #32]
 8001532:	431a      	orrs	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001538:	019b      	lsls	r3, r3, #6
 800153a:	431a      	orrs	r2, r3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001540:	085b      	lsrs	r3, r3, #1
 8001542:	3b01      	subs	r3, #1
 8001544:	041b      	lsls	r3, r3, #16
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154c:	061b      	lsls	r3, r3, #24
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001554:	071b      	lsls	r3, r3, #28
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_RCC_OscConfig+0x4b0>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001560:	f7ff f83e 	bl	80005e0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001568:	f7ff f83a 	bl	80005e0 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e020      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800157a:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x44c>
 8001586:	e018      	b.n	80015ba <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <HAL_RCC_OscConfig+0x4b0>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158e:	f7ff f827 	bl	80005e0 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff f823 	bl	80005e0 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e009      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a8:	4b06      	ldr	r3, [pc, #24]	; (80015c4 <HAL_RCC_OscConfig+0x4a8>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f0      	bne.n	8001596 <HAL_RCC_OscConfig+0x47a>
 80015b4:	e001      	b.n	80015ba <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e000      	b.n	80015bc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3718      	adds	r7, #24
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000
 80015cc:	42470060 	.word	0x42470060

080015d0 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d4:	f7fe ff9e 	bl	8000514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015d8:	f000 f80e 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015dc:	f000 f876 	bl	80016cc <MX_GPIO_Init>
  while (1)
  {

  /* USER CODE END WHILE */
	//Ld2 pin refers to "PA5" pin, which is D13 pin to which led is connected
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port,LED_RED_1_Pin); //Toggle LED
 80015e0:	2120      	movs	r1, #32
 80015e2:	4804      	ldr	r0, [pc, #16]	; (80015f4 <main+0x24>)
 80015e4:	f7ff fae3 	bl	8000bae <HAL_GPIO_TogglePin>

	HAL_Delay(2000); //Delay 1 Seconds
 80015e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ec:	f7ff f804 	bl	80005f8 <HAL_Delay>
	HAL_GPIO_TogglePin(LED_RED_1_GPIO_Port,LED_RED_1_Pin); //Toggle LED
 80015f0:	e7f6      	b.n	80015e0 <main+0x10>
 80015f2:	bf00      	nop
 80015f4:	40020800 	.word	0x40020800

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	4a2e      	ldr	r2, [pc, #184]	; (80016bc <SystemClock_Config+0xc4>)
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <SystemClock_Config+0xc4>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b2b      	ldr	r3, [pc, #172]	; (80016bc <SystemClock_Config+0xc4>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	607b      	str	r3, [r7, #4]
 8001618:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	2300      	movs	r3, #0
 800161c:	603b      	str	r3, [r7, #0]
 800161e:	4a28      	ldr	r2, [pc, #160]	; (80016c0 <SystemClock_Config+0xc8>)
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <SystemClock_Config+0xc8>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b25      	ldr	r3, [pc, #148]	; (80016c0 <SystemClock_Config+0xc8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001632:	603b      	str	r3, [r7, #0]
 8001634:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001636:	2302      	movs	r3, #2
 8001638:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163a:	2301      	movs	r3, #1
 800163c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800163e:	2310      	movs	r3, #16
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001642:	2300      	movs	r3, #0
 8001644:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001646:	f107 031c 	add.w	r3, r7, #28
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff fd66 	bl	800111c <HAL_RCC_OscConfig>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <SystemClock_Config+0x66>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001656:	218d      	movs	r1, #141	; 0x8d
 8001658:	481a      	ldr	r0, [pc, #104]	; (80016c4 <SystemClock_Config+0xcc>)
 800165a:	f000 f863 	bl	8001724 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800165e:	230f      	movs	r3, #15
 8001660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001666:	2300      	movs	r3, #0
 8001668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800166e:	2300      	movs	r3, #0
 8001670:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001672:	f107 0308 	add.w	r3, r7, #8
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff faab 	bl	8000bd4 <HAL_RCC_ClockConfig>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <SystemClock_Config+0x94>
  {
    _Error_Handler(__FILE__, __LINE__);
 8001684:	219b      	movs	r1, #155	; 0x9b
 8001686:	480f      	ldr	r0, [pc, #60]	; (80016c4 <SystemClock_Config+0xcc>)
 8001688:	f000 f84c 	bl	8001724 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800168c:	f7ff fb84 	bl	8000d98 <HAL_RCC_GetHCLKFreq>
 8001690:	4602      	mov	r2, r0
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <SystemClock_Config+0xd0>)
 8001694:	fba3 2302 	umull	r2, r3, r3, r2
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff f8a5 	bl	80007ea <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80016a0:	2004      	movs	r0, #4
 80016a2:	f7ff f8af 	bl	8000804 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80016a6:	2200      	movs	r2, #0
 80016a8:	2100      	movs	r1, #0
 80016aa:	f04f 30ff 	mov.w	r0, #4294967295
 80016ae:	f7ff f880 	bl	80007b2 <HAL_NVIC_SetPriority>
}
 80016b2:	bf00      	nop
 80016b4:	3750      	adds	r7, #80	; 0x50
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	08001954 	.word	0x08001954
 80016c8:	10624dd3 	.word	0x10624dd3

080016cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	4a11      	ldr	r2, [pc, #68]	; (800171c <MX_GPIO_Init+0x50>)
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_GPIO_Init+0x50>)
 80016da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_GPIO_Init+0x50>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_1_GPIO_Port, LED_RED_1_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2120      	movs	r1, #32
 80016f2:	480b      	ldr	r0, [pc, #44]	; (8001720 <MX_GPIO_Init+0x54>)
 80016f4:	f7ff fa42 	bl	8000b7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_1_Pin */
  GPIO_InitStruct.Pin = LED_RED_1_Pin;
 80016f8:	2320      	movs	r3, #32
 80016fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fc:	2301      	movs	r3, #1
 80016fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_RED_1_GPIO_Port, &GPIO_InitStruct);
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4804      	ldr	r0, [pc, #16]	; (8001720 <MX_GPIO_Init+0x54>)
 800170e:	f7ff f8a3 	bl	8000858 <HAL_GPIO_Init>

}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800
 8001720:	40020800 	.word	0x40020800

08001724 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800172e:	e7fe      	b.n	800172e <_Error_Handler+0xa>

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4a25      	ldr	r2, [pc, #148]	; (80017d0 <HAL_MspInit+0xa0>)
 800173c:	4b24      	ldr	r3, [pc, #144]	; (80017d0 <HAL_MspInit+0xa0>)
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001740:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_MspInit+0xa0>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	603b      	str	r3, [r7, #0]
 8001756:	4a1e      	ldr	r2, [pc, #120]	; (80017d0 <HAL_MspInit+0xa0>)
 8001758:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_MspInit+0xa0>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_MspInit+0xa0>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800176e:	2003      	movs	r0, #3
 8001770:	f7ff f814 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001774:	2200      	movs	r2, #0
 8001776:	2100      	movs	r1, #0
 8001778:	f06f 000b 	mvn.w	r0, #11
 800177c:	f7ff f819 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2100      	movs	r1, #0
 8001784:	f06f 000a 	mvn.w	r0, #10
 8001788:	f7ff f813 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800178c:	2200      	movs	r2, #0
 800178e:	2100      	movs	r1, #0
 8001790:	f06f 0009 	mvn.w	r0, #9
 8001794:	f7ff f80d 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	f06f 0004 	mvn.w	r0, #4
 80017a0:	f7ff f807 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	f06f 0003 	mvn.w	r0, #3
 80017ac:	f7ff f801 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80017b0:	2200      	movs	r2, #0
 80017b2:	2100      	movs	r1, #0
 80017b4:	f06f 0001 	mvn.w	r0, #1
 80017b8:	f7fe fffb 	bl	80007b2 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f7fe fff5 	bl	80007b2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c8:	bf00      	nop
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40023800 	.word	0x40023800

080017d4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e6:	e7fe      	b.n	80017e6 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	e7fe      	b.n	80017ec <MemManage_Handler+0x4>

080017ee <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f2:	e7fe      	b.n	80017f2 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	e7fe      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fa <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017fe:	bf00      	nop
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001828:	f7fe fec6 	bl	80005b8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800182c:	f7ff f806 	bl	800083c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4a16      	ldr	r2, [pc, #88]	; (8001894 <SystemInit+0x60>)
 800183a:	4b16      	ldr	r3, [pc, #88]	; (8001894 <SystemInit+0x60>)
 800183c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001848:	4a13      	ldr	r2, [pc, #76]	; (8001898 <SystemInit+0x64>)
 800184a:	4b13      	ldr	r3, [pc, #76]	; (8001898 <SystemInit+0x64>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f043 0301 	orr.w	r3, r3, #1
 8001852:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001854:	4b10      	ldr	r3, [pc, #64]	; (8001898 <SystemInit+0x64>)
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800185a:	4a0f      	ldr	r2, [pc, #60]	; (8001898 <SystemInit+0x64>)
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <SystemInit+0x64>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001868:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <SystemInit+0x64>)
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <SystemInit+0x68>)
 800186e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001870:	4a09      	ldr	r2, [pc, #36]	; (8001898 <SystemInit+0x64>)
 8001872:	4b09      	ldr	r3, [pc, #36]	; (8001898 <SystemInit+0x64>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <SystemInit+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001882:	4b04      	ldr	r3, [pc, #16]	; (8001894 <SystemInit+0x60>)
 8001884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001888:	609a      	str	r2, [r3, #8]
#endif
}
 800188a:	bf00      	nop
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00
 8001898:	40023800 	.word	0x40023800
 800189c:	24003010 	.word	0x24003010

080018a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018a6:	e003      	b.n	80018b0 <LoopCopyDataInit>

080018a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018ae:	3104      	adds	r1, #4

080018b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018b8:	d3f6      	bcc.n	80018a8 <CopyDataInit>
  ldr  r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018bc:	e002      	b.n	80018c4 <LoopFillZerobss>

080018be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018c0:	f842 3b04 	str.w	r3, [r2], #4

080018c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018c8:	d3f9      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018ca:	f7ff ffb3 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f000 f811 	bl	80018f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d2:	f7ff fe7d 	bl	80015d0 <main>
  bx  lr    
 80018d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018dc:	08001984 	.word	0x08001984
  ldr  r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80018e8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80018ec:	2000002c 	.word	0x2000002c

080018f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <ADC_IRQHandler>
	...

080018f4 <__libc_init_array>:
 80018f4:	b570      	push	{r4, r5, r6, lr}
 80018f6:	4e0d      	ldr	r6, [pc, #52]	; (800192c <__libc_init_array+0x38>)
 80018f8:	4c0d      	ldr	r4, [pc, #52]	; (8001930 <__libc_init_array+0x3c>)
 80018fa:	1ba4      	subs	r4, r4, r6
 80018fc:	10a4      	asrs	r4, r4, #2
 80018fe:	2500      	movs	r5, #0
 8001900:	42a5      	cmp	r5, r4
 8001902:	d109      	bne.n	8001918 <__libc_init_array+0x24>
 8001904:	4e0b      	ldr	r6, [pc, #44]	; (8001934 <__libc_init_array+0x40>)
 8001906:	4c0c      	ldr	r4, [pc, #48]	; (8001938 <__libc_init_array+0x44>)
 8001908:	f000 f818 	bl	800193c <_init>
 800190c:	1ba4      	subs	r4, r4, r6
 800190e:	10a4      	asrs	r4, r4, #2
 8001910:	2500      	movs	r5, #0
 8001912:	42a5      	cmp	r5, r4
 8001914:	d105      	bne.n	8001922 <__libc_init_array+0x2e>
 8001916:	bd70      	pop	{r4, r5, r6, pc}
 8001918:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800191c:	4798      	blx	r3
 800191e:	3501      	adds	r5, #1
 8001920:	e7ee      	b.n	8001900 <__libc_init_array+0xc>
 8001922:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001926:	4798      	blx	r3
 8001928:	3501      	adds	r5, #1
 800192a:	e7f2      	b.n	8001912 <__libc_init_array+0x1e>
 800192c:	0800197c 	.word	0x0800197c
 8001930:	0800197c 	.word	0x0800197c
 8001934:	0800197c 	.word	0x0800197c
 8001938:	08001980 	.word	0x08001980

0800193c <_init>:
 800193c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800193e:	bf00      	nop
 8001940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001942:	bc08      	pop	{r3}
 8001944:	469e      	mov	lr, r3
 8001946:	4770      	bx	lr

08001948 <_fini>:
 8001948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194a:	bf00      	nop
 800194c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800194e:	bc08      	pop	{r3}
 8001950:	469e      	mov	lr, r3
 8001952:	4770      	bx	lr
